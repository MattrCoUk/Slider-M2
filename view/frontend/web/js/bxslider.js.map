{
  "version": 3,
  "file": "bxslider.js",
  "sourceRoot": "",
  "sources": [
    "bxslider.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;;;;;EAUA,MAAA,CAAO,QAAP,CAAgB,CAAC,KAAjB,CAAuB,QAAA,CAAC,CAAD,CAAA;AACpB,QAAA,QAAA,EAAA;IAAA,MAAA,GAAS,CAAA;IACT,QAAA,GAGG,CAAA;;MAAA,IAAA,EAA2B,UAA3B;MACA,aAAA,EAA2B,EAD3B;MAEA,YAAA,EAA2B,KAF3B;MAGA,gBAAA,EAA2B,KAH3B;MAIA,KAAA,EAA2B,GAJ3B;MAKA,MAAA,EAA2B,IAL3B;MAMA,WAAA,EAA2B,CAN3B;MAOA,UAAA,EAA2B,CAP3B;MAQA,WAAA,EAA2B,KAR3B;MASA,QAAA,EAA2B,KAT3B;MAUA,MAAA,EAA2B,KAV3B;MAWA,WAAA,EAA2B,KAX3B;MAYA,cAAA,EAA2B,KAZ3B;MAaA,mBAAA,EAA2B,GAb3B;MAcA,KAAA,EAA2B,KAd3B;MAeA,MAAA,EAA2B,IAf3B;MAgBA,aAAA,EAA2B,QAhB3B;MAiBA,UAAA,EAA2B,IAjB3B;MAkBA,WAAA,EAA2B,EAlB3B;MAmBA,YAAA,EAA2B,YAnB3B;;MAsBA,YAAA,EAA2B,KAtB3B;MAuBA,cAAA,EAA2B,EAvB3B;MAwBA,aAAA,EAA2B,IAxB3B;MAyBA,oBAAA,EAA2B,IAzB3B;MA0BA,oBAAA,EAA2B,KA1B3B;;MA6BA,KAAA,EAA2B,IA7B3B;MA8BA,SAAA,EAA2B,MA9B3B;MA+BA,mBAAA,EAA2B,KA/B3B;MAgCA,aAAA,EAA2B,IAhC3B;MAiCA,UAAA,EAA2B,IAjC3B;MAkCA,WAAA,EAA2B,IAlC3B;;MAqCA,QAAA,EAA2B,KArC3B;MAsCA,QAAA,EAA2B,MAtC3B;MAuCA,QAAA,EAA2B,MAvC3B;MAwCA,YAAA,EAA2B,IAxC3B;MAyCA,YAAA,EAA2B,IAzC3B;MA0CA,YAAA,EAA2B,KA1C3B;MA2CA,SAAA,EAA2B,OA3C3B;MA4CA,QAAA,EAA2B,MA5C3B;MA6CA,mBAAA,EAA2B,KA7C3B;MA8CA,oBAAA,EAA2B,IA9C3B;;MAiDA,IAAA,EAA2B,KAjD3B;MAkDA,KAAA,EAA2B,IAlD3B;MAmDA,SAAA,EAA2B,IAnD3B;MAoDA,aAAA,EAA2B,MApD3B;MAqDA,SAAA,EAA2B,IArD3B;MAsDA,SAAA,EAA2B,CAtD3B;MAuDA,mBAAA,EAA2B,KAvD3B;;MA0DA,SAAA,EAA2B,CA1D3B;MA2DA,SAAA,EAA2B,CA3D3B;MA4DA,UAAA,EAA2B,CA5D3B;MA6DA,UAAA,EAA2B,CA7D3B;MAgEA,YAAA,EAA2B,QAAA,CAAA,CAAA,EAAA,CAhE3B;MAiEA,aAAA,EAA2B,QAAA,CAAA,CAAA,EAAA,CAjE3B;MAkEA,YAAA,EAA2B,QAAA,CAAA,CAAA,EAAA,CAlE3B;MAmEA,WAAA,EAA2B,QAAA,CAAA,CAAA,EAAA,CAnE3B;MAoEA,WAAA,EAA2B,QAAA,CAAA,CAAA,EAAA,CApE3B;MAqEA,cAAA,EAA2B,QAAA,CAAA,CAAA,EAAA;IArE3B;IAuEH,CAAC,CAAC,EAAE,CAAC,QAAL,GAAgB,QAAA,CAAC,OAAD,CAAA;AACb,UAAA,cAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,aAAA,EAAA,cAAA,EAAA,aAAA,EAAA,cAAA,EAAA,aAAA,EAAA,EAAA,EAAA,SAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,aAAA,EAAA,YAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,UAAA,EAAA,0BAAA,EAAA,kBAAA,EAAA,uBAAA,EAAA,iBAAA,EAAA,YAAA,EAAA;MAAA,IAAG,IAAC,CAAA,MAAD,KAAW,CAAd;AACG,eAAO,KADV;OAAA;;MAGA,IAAG,IAAC,CAAA,MAAD,GAAU,CAAb;QACG,IAAC,CAAA,IAAD,CAAM,QAAA,CAAA,CAAA;UACH,CAAA,CAAE,IAAF,CAAO,CAAC,QAAR,CAAiB,OAAjB;QADG,CAAN;AAGA,eAAO,KAJV;OAHA;;MASA,MAAA,GAAS,CAAA,EATT;;MAWA,EAAA,GAAK;MACL,MAAM,CAAC,EAAP,GAAY,KAZZ;;;;;;;MAmBA,WAAA,GAAc,CAAA,CAAE,MAAF,CAAS,CAAC,KAAV,CAAA;MACd,YAAA,GAAe,CAAA,CAAE,MAAF,CAAS,CAAC,MAAV,CAAA,EApBf;;;;;;;;;;;MAgCA,IAAA,GAAO,QAAA,CAAA,CAAA,EAAA;;QAEJ,MAAM,CAAC,QAAP,GAAkB,CAAC,CAAC,MAAF,CAAS,CAAA,CAAT,EAAa,QAAb,EAAuB,OAAvB,EAAlB;;QAEA,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,QAAA,CAAS,MAAM,CAAC,QAAQ,CAAC,UAAzB,EAF7B;;QAIA,MAAM,CAAC,QAAP,GAAkB,EAAE,CAAC,QAAH,CAAY,MAAM,CAAC,QAAQ,CAAC,aAA5B,EAJlB;;QAMA,IAAG,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,MAAM,CAAC,QAAQ,CAAC,SAA5C;UACG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,OAD/C;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,MAAM,CAAC,QAAQ,CAAC,SAA5C;UACG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,OAD/C;SARA;;QAWA,IAAG,MAAM,CAAC,QAAQ,CAAC,WAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,MAA3C,EADhC;SAXA;;QAcA,MAAM,CAAC,MAAP,GAAgB;UAAA,KAAA,EAAO,MAAM,CAAC,QAAQ,CAAC;QAAvB,EAdhB;;QAgBA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA5B,IAAiC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,EAhB/E;;QAkBA,IAAG,MAAM,CAAC,QAAV;UACG,MAAM,CAAC,QAAQ,CAAC,aAAhB,GAAgC,MADnC;SAlBA;;;QAsBA,MAAM,CAAC,YAAP,GAAsB,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,UAA5C,GAAyD,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA7B,CAAA,GAAkC,MAAM,CAAC,QAAQ,CAAC;QACjI,MAAM,CAAC,YAAP,GAAsB,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,UAA5C,GAAyD,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA7B,CAAA,GAAkC,MAAM,CAAC,QAAQ,CAAC,YAvBjI;;QAyBA,MAAM,CAAC,OAAP,GAAiB,MAzBjB;;QA2BA,MAAM,CAAC,QAAP,GAAkB,CAAA,EA3BlB;;QA6BA,MAAM,CAAC,QAAP,GAAkB,KA7BlB;;QA+BA,MAAM,CAAC,QAAP,GAAqB,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B,GAA2C,KAA3C,GAAsD,OA/BxE;;QAiCA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,QAAQ,CAAC,MAAhB,IAA2B,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAAnD,IAAiE,CAAA,QAAA,CAAA,CAAA;AAEhF,cAAA,GAAA,EAAA,CAAA,EAAA,KAAA;;UAAA,GAAA,GAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB,EAAN;;UAEA,KAAA,GAAQ,CACL,mBADK,EAEL,gBAFK,EAGL,cAHK,EAIL,eAJK,EAFR;;UASA,KAAA,UAAA;YACG,IAAG,GAAG,CAAC,KAAM,CAAA,KAAM,CAAA,CAAA,CAAN,CAAV,KAAuB,MAA1B;cACG,MAAM,CAAC,SAAP,GAAmB,KAAM,CAAA,CAAA,CAAE,CAAC,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,CAAmC,CAAC,WAApC,CAAA;cACnB,MAAM,CAAC,QAAP,GAAkB,GAAA,GAAM,MAAM,CAAC,SAAb,GAAyB;AAC3C,qBAAO,KAHV;;UADH;iBAKA;QAhBgF,CAAA,CAAH,CAAA,EAjChF;;QAmDA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;UACG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,UAD/C;SAnDA;;QAsDA,EAAE,CAAC,IAAH,CAAQ,WAAR,EAAqB,EAAE,CAAC,IAAH,CAAQ,OAAR,CAArB;QACA,EAAE,CAAC,QAAH,CAAY,MAAM,CAAC,QAAQ,CAAC,aAA5B,CAA0C,CAAC,IAA3C,CAAgD,QAAA,CAAA,CAAA;UAC7C,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,EAA0B,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,OAAb,CAA1B;QAD6C,CAAhD,EAvDA;;QA2DA,KAAA,CAAA;MA7DI,EAhCP;;;;;MAoGA,KAAA,GAAQ,QAAA,CAAA,CAAA;AAGL,YAAA,eAAA,EAAA,aAAA;;;QAAA,EAAE,CAAC,IAAH,CAAQ,cAAA,GAAiB,MAAM,CAAC,QAAQ,CAAC,YAAjC,GAAgD,yCAAxD,EAAA;;;QAGA,MAAM,CAAC,QAAP,GAAkB,EAAE,CAAC,MAAH,CAAA,EAHlB;;;QAMA,MAAM,CAAC,MAAP,GAAgB,CAAA,CAAE,4BAAF;QAChB,MAAM,CAAC,QAAQ,CAAC,OAAhB,CAAwB,MAAM,CAAC,MAA/B,EAPA;;;;QAWA,EAAE,CAAC,GAAH,CACG;UAAA,KAAA,EAAU,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,GAAzB,GAA+B,GAA/B,GAAqC,GAAlF,GAA2F,MAAlG;UACA,QAAA,EAAU;QADV,CADH,EAXA;;;QAgBA,IAAG,MAAM,CAAC,QAAP,IAAoB,MAAM,CAAC,QAAQ,CAAC,MAAvC;UACG,EAAE,CAAC,GAAH,CAAO,GAAA,GAAM,MAAM,CAAC,SAAb,GAAyB,6BAAhC,EAA+D,MAAM,CAAC,QAAQ,CAAC,MAA/E,EADH;SAAA,MAIK,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAApB;UACF,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,QADvB;;QAGL,aAAA,GAAgB,sBAAA,CAAA,EAvBhB;;;QA0BA,MAAM,CAAC,QAAQ,CAAC,GAAhB,CACG;UAAA,KAAA,EAAO,MAAP;UACA,QAAA,EAAU,QADV;UAEA,QAAA,EAAU;QAFV,CADH;QAKA,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAA,CAAwB,CAAC,GAAzB,CAA6B;UAAA,QAAA,EAAU,mBAAA,CAAA;QAAV,CAA7B;QAGA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,KAApB;UACG,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAA,CAAwB,CAAC,GAAzB,CAA6B;YAAA,MAAA,EAAQ;UAAR,CAA7B,EADH;SAlCA;;;QAsCA,MAAM,CAAC,QAAQ,CAAC,GAAhB,CACG;UAAA,OAAA,EAAY,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,MAA7C,GAAyD,MAAlE;UACA,SAAA,EAAW,MADX;UAEA,QAAA,EAAU;QAFV,CADH,EAtCA;;;QA4CA,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,OAApB,EAA6B,aAAA,CAAA,CAA7B,EA5CA;;;QA+CA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAAxB,IAAyC,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAA1E;UACG,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,aAApB,EAAmC,MAAM,CAAC,QAAQ,CAAC,WAAnD,EADH;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAAxB,IAAuC,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAAxE;UACG,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,cAApB,EAAoC,MAAM,CAAC,QAAQ,CAAC,WAApD,EADH;SAjDA;;;QAqDA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAA3B;UACG,MAAM,CAAC,QAAQ,CAAC,GAAhB,CACG;YAAA,QAAA,EAAU,UAAV;YACA,MAAA,EAAQ,CADR;YAEA,OAAA,EAAS;UAFT,CADH,EAAA;;UAKA,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,QAAQ,CAAC,UAAnC,CAA8C,CAAC,GAA/C,CACG;YAAA,MAAA,EAAQ,MAAM,CAAC,QAAQ,CAAC,WAAxB;YACA,OAAA,EAAS;UADT,CADH,EANH;SArDA;;;QAgEA,MAAM,CAAC,QAAQ,CAAC,EAAhB,GAAqB,CAAA,CAAE,6BAAF,EAhErB;;;QAmEA,IAAG,MAAM,CAAC,QAAQ,CAAC,QAAnB;UACG,cAAA,CAAA,EADH;SAnEA;;;QAuEA,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB,MAAM,CAAC,QAAQ,CAAC,UAAhB,KAA8B,WAAA,CAAA,CAAA,GAAgB,EAvEnE;;;QA0EA,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAnB;UACG,EAAE,CAAC,OAAH,CAAA,EADH;SA1EA;;;QA8EA,eAAA,GAAkB,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,QAAQ,CAAC,UAAnC;QAClB,IAAG,MAAM,CAAC,QAAQ,CAAC,aAAhB,KAAiC,KAApC;UACG,eAAA,GAAkB,MAAM,CAAC,SAD5B;;QAIA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAApB;;UAEG,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAnB;YACG,WAAA,CAAA,EADH;WAAA;;UAGA,IAAG,MAAM,CAAC,QAAQ,CAAC,QAAnB;YACG,cAAA,CAAA,EADH;WAHA;;UAMA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,IAAyB,MAAM,CAAC,QAAQ,CAAC,YAA5C;YACG,kBAAA,CAAA,EADH;WANA;;UASA,IAAG,MAAM,CAAC,QAAQ,CAAC,QAAhB,IAA4B,MAAM,CAAC,QAAQ,CAAC,YAA5C,IAA4D,MAAM,CAAC,QAAQ,CAAC,KAA/E;YACG,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAsB,MAAM,CAAC,QAAQ,CAAC,EAAtC,EADH;WAXH;SAAA,MAAA;;;UAgBG,MAAM,CAAC,QAAQ,CAAC,KAAhB,GAAwB,MAhB3B;SAnFA;;;QAsGA,YAAA,CAAa,eAAb,EAA8B,KAA9B;MAzGK;MA4GR,YAAA,GAAe,QAAA,CAAC,QAAD,EAAW,QAAX,CAAA;AACZ,YAAA,KAAA,EAAA;QAAA,KAAA,GAAQ,QAAQ,CAAC,IAAT,CAAc,aAAd,CAA4B,CAAC;QACrC,IAAG,KAAA,KAAS,CAAZ;UACG,QAAA,CAAA;AACA,iBAFH;;QAGA,KAAA,GAAQ;QACR,QAAQ,CAAC,IAAT,CAAc,aAAd,CAA4B,CAAC,IAA7B,CAAkC,QAAA,CAAA,CAAA;UAC/B,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,QAAA,CAAA,CAAA;YACjB,IAAG,EAAE,KAAF,KAAW,KAAd;cACG,QAAA,CAAA,EADH;;UADiB,CAApB,CAIC,CAAC,IAJF,CAIO,QAAA,CAAA,CAAA;YACJ,IAAG,IAAC,CAAA,QAAJ;cACG,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAA,EADH;;UADI,CAJP;QAD+B,CAAlC;MANY,EAhNf;;;;;MAsOA,KAAA,GAAQ,QAAA,CAAA,CAAA;AAGL,YAAA,KAAA,EAAA,WAAA,EAAA,YAAA;;;QAAA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAhB,IAAiC,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAAzD,IAAoE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAxF;UACG,KAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B,GAA2C,MAAM,CAAC,QAAQ,CAAC,SAA3D,GAA0E,MAAM,CAAC,QAAQ,CAAC;UAClG,WAAA,GAAc,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAsB,CAAtB,EAAyB,KAAzB,CAA+B,CAAC,KAAhC,CAAA,CAAuC,CAAC,QAAxC,CAAiD,UAAjD;UACd,YAAA,GAAe,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAsB,CAAC,KAAvB,CAA6B,CAAC,KAA9B,CAAA,CAAqC,CAAC,QAAtC,CAA+C,UAA/C;UACf,EAAE,CAAC,MAAH,CAAU,WAAV,CAAsB,CAAC,OAAvB,CAA+B,YAA/B,EAJH;SAAA;;;QAOA,MAAM,CAAC,MAAM,CAAC,MAAd,CAAA,EAPA;;;QAUA,gBAAA,CAAA,EAVA;;;;;;;QAiBA,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,iBAAA,CAAA,CAAvB,EAjBA;;;QAqBA,EAAE,CAAC,YAAH,CAAA,EArBA;;;QAwBA,MAAM,CAAC,QAAQ,CAAC,YAAhB,CAA6B,MAAM,CAAC,MAAM,CAAC,KAA3C,EAxBA;;;QA2BA,MAAM,CAAC,WAAP,GAAqB,KA3BrB;;;QA8BA,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAnB;UACG,CAAA,CAAE,MAAF,CAAS,CAAC,IAAV,CAAe,QAAf,EAAyB,YAAzB,EADH;SA9BA;;;QAkCA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,IAAyB,MAAM,CAAC,QAAQ,CAAC,SAAzC,IAAuD,CAAC,WAAA,CAAA,CAAA,GAAgB,CAAhB,IAAqB,MAAM,CAAC,QAAQ,CAAC,mBAAtC,CAA1D;UACG,QAAA,CAAA,EADH;SAlCA;;;QAsCA,IAAG,MAAM,CAAC,QAAQ,CAAC,MAAnB;UACG,UAAA,CAAA,EADH;SAtCA;;;QA0CA,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAnB;UACG,iBAAA,CAAkB,MAAM,CAAC,QAAQ,CAAC,UAAlC,EADH;SA1CA;;QA6CA,IAAG,MAAM,CAAC,QAAQ,CAAC,QAAnB;UACG,uBAAA,CAAA,EADH;SA7CA;;QAgDA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAhB,IAAiC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAArD;UACG,SAAA,CAAA,EADH;;MAnDK,EAtOR;;;;;MAiSA,iBAAA,GAAoB,QAAA,CAAA,CAAA;AACjB,YAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA;QAAA,MAAA,GAAS,EAAT;;QAEA,QAAA,GAAW,CAAA,CAAA,EAFX;;QAIA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAAxB,IAAuC,CAAC,MAAM,CAAC,QAAQ,CAAC,cAA3D;UACG,QAAA,GAAW,MAAM,CAAC,SADrB;SAAA,MAAA;UAIG,IAAG,CAAC,MAAM,CAAC,QAAX;YACG,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,EADd;WAAA,MAAA;;;YAKG,YAAA,GAAkB,MAAM,CAAC,QAAQ,CAAC,UAAhB,KAA8B,CAAjC,GAAwC,MAAM,CAAC,MAAM,CAAC,KAAtD,GAAiE,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,SAAA,CAAA,EAAtG;;YAEA,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,YAAnB,EAFX;;YAIA,CAAA,GAAI;AACJ,mBAAM,CAAA,IAAK,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAAvC,GAAA;;cAEG,IAAG,YAAA,GAAe,CAAf,IAAoB,MAAM,CAAC,QAAQ,CAAC,MAAvC;gBACG,QAAA,GAAW,QAAQ,CAAC,GAAT,CAAa,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,CAAA,GAAI,CAAvB,CAAb,EADd;eAAA,MAAA;gBAGG,QAAA,GAAW,QAAQ,CAAC,GAAT,CAAa,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,YAAA,GAAe,CAAlC,CAAb,EAHd;;cAIA,CAAA;YANH,CAVH;WAJH;SAJA;;QA0BA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;UACG,QAAQ,CAAC,IAAT,CAAc,QAAA,CAAC,KAAD,CAAA;YACX,MAAA,IAAU,CAAA,CAAE,IAAF,CAAO,CAAC,WAAR,CAAA;UADC,CAAd,EAAA;;UAIA,IAAG,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAAjC;YACG,MAAA,IAAU,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA7B,EAD3C;WALH;SAAA,MAAA;;UASG,MAAA,GAAS,IAAI,CAAC,GAAG,CAAC,KAAT,CAAe,IAAf,EAAqB,QAAQ,CAAC,GAAT,CAAa,QAAA,CAAA,CAAA;mBACxC,CAAA,CAAE,IAAF,CAAO,CAAC,WAAR,CAAoB,KAApB;UADwC,CAAb,CAE7B,CAAC,GAF4B,CAAA,CAArB,EATZ;;QAYA,IAAG,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,YAApB,CAAA,KAAqC,YAAxC;UACG,MAAA,IAAU,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,aAApB,CAAX,CAAA,GAAiD,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,gBAApB,CAAX,CAAjD,GAAqG,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,kBAApB,CAAX,CAArG,GAA2J,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,qBAApB,CAAX,EADxK;SAAA,MAEK,IAAG,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,YAApB,CAAA,KAAqC,aAAxC;UACF,MAAA,IAAU,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,aAApB,CAAX,CAAA,GAAiD,UAAA,CAAW,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,gBAApB,CAAX,EADzD;;eAEL;MA3CiB,EAjSpB;;;;;MAkVA,mBAAA,GAAsB,QAAA,CAAA,CAAA;AACnB,YAAA;QAAA,KAAA,GAAQ;QACR,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,CAAhC;UACG,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;YACG,KAAA,GAAQ,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,MAAM,CAAC,QAAQ,CAAC,UAA5C,GAAyD,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA7B,CAAA,GAAkC,MAAM,CAAC,QAAQ,CAAC,YADtH;WAAA,MAAA;YAGG,KAAA,GAAQ,MAAM,CAAC,QAAQ,CAAC,WAH3B;WADH;;eAKA;MAPmB,EAlVtB;;;;;MA+VA,aAAA,GAAgB,QAAA,CAAA,CAAA;AAEb,YAAA,UAAA,EAAA,SAAA;;QAAA,UAAA,GAAa,MAAM,CAAC,QAAQ,CAAC,WAA7B;;QAEA,SAAA,GAAY,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,EAFZ;;QAIA,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAhB,KAA8B,CAA9B,IAAmC,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,SAA7B,IAA2C,CAAC,MAAM,CAAC,QAAtF,IAAkG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA7H;UACG,UAAA,GAAa,UADhB;;SAAA,MAGK,IAAG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA5B,IAAkC,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA7D;UACF,IAAG,SAAA,GAAY,MAAM,CAAC,YAAtB;AAAA;;WAAA,MAEK,IAAG,SAAA,GAAY,MAAM,CAAC,YAAtB;YACF,UAAA,GAAa,CAAC,SAAA,GAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA7B,CAA/B,CAAb,CAAA,GAAgF,MAAM,CAAC,QAAQ,CAAC,UAD3G;WAHH;;eAKL;MAda,EA/VhB;;;;;MAmXA,sBAAA,GAAyB,QAAA,CAAA,CAAA;AACtB,YAAA,UAAA,EAAA;QAAA,aAAA,GAAgB;QAChB,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAAxB,IAAyC,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,CAAzE;;UAEG,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAA,GAA0B,MAAM,CAAC,YAApC;YACG,aAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,UADnC;;WAAA,MAGK,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAA,GAA0B,MAAM,CAAC,YAApC;YACF,aAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,UAD9B;WAAA,MAAA;;YAIF,UAAA,GAAa,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAuB,CAAC,KAAxB,CAAA,CAAA,GAAkC,MAAM,CAAC,QAAQ,CAAC;YAC/D,aAAA,GAAgB,IAAI,CAAC,KAAL,CAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAA,GAA0B,MAAM,CAAC,QAAQ,CAAC,WAA3C,CAAA,GAA0D,UAArE,EALd;WALR;;SAAA,MAYK,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;UACF,aAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,UAD9B;;eAEL;MAhBsB,EAnXzB;;;;;MAyYA,WAAA,GAAc,QAAA,CAAA,CAAA;AACX,YAAA,UAAA,EAAA,OAAA,EAAA;QAAA,QAAA,GAAW,EAAX;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,CAAhC;UACG,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAnB;YACG,QAAA,GAAW,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,SAAA,CAAA,CAAnC,EADd;WAAA,MAAA;;YAIG,UAAA,GAAa;YACb,OAAA,GAAU,EADV;;AAGA,mBAAM,UAAA,GAAa,MAAM,CAAC,QAAQ,CAAC,MAAnC;cACG,EAAE;cACF,UAAA,GAAa,OAAA,GAAU,sBAAA,CAAA;cACvB,OAAA,IAAc,MAAM,CAAC,QAAQ,CAAC,UAAhB,IAA8B,sBAAA,CAAA,CAAjC,GAA+D,MAAM,CAAC,QAAQ,CAAC,UAA/E,GAA+F,sBAAA,CAAA;YAH7G,CAPH;WADH;SAAA,MAAA;;UAcG,QAAA,GAAW,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,sBAAA,CAAA,CAAnC,EAdd;;eAeA;MAlBW,EAzYd;;;;;MAiaA,SAAA,GAAY,QAAA,CAAA,CAAA,EAAA;;QAET,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAhB,GAA6B,CAA7B,IAAmC,MAAM,CAAC,QAAQ,CAAC,UAAhB,IAA8B,sBAAA,CAAA,CAApE;AACG,iBAAO,MAAM,CAAC,QAAQ,CAAC,WAD1B;SAAA;;eAGA,sBAAA,CAAA;MALS,EAjaZ;;;;;MA4aA,gBAAA,GAAmB,QAAA,CAAA,CAAA;QAChB;QACA;AADA,YAAA,SAAA,EAAA,gBAAA,EAAA,QAAA;;QAGA,IAAG,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,MAAM,CAAC,QAAQ,CAAC,SAAzC,IAAuD,MAAM,CAAC,MAAM,CAAC,IAArE,IAA8E,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAlG;UACG,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;;YAEG,SAAA,GAAY,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAA;YACZ,QAAA,GAAW,SAAS,CAAC,QAAV,CAAA,EADX;;YAGA,mBAAA,CAAoB,CAAC,CAAC,QAAQ,CAAC,IAAT,GAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAA,GAA0B,SAAS,CAAC,UAAV,CAAA,CAA3B,CAAjB,CAArB,EAA2F,OAA3F,EAAoG,CAApG,EALH;WAAA,MAMK,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;;YAEF,gBAAA,GAAmB,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAA0B,MAAM,CAAC,QAAQ,CAAC;YAC7D,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,gBAAnB,CAAoC,CAAC,QAArC,CAAA,EADX;;YAGA,mBAAA,CAAoB,CAAC,QAAQ,CAAC,GAA9B,EAAmC,OAAnC,EAA4C,CAA5C,EALE;WAPR;SAAA,MAAA;;;UAgBG,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,SAAA,CAAA,CAAzC,CAAqD,CAAC,QAAtD,CAAA,EAAX;;UAEA,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,WAAA,CAAA,CAAA,GAAgB,CAA1C;YACG,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB,KADxB;WAFA;;UAKA,IAAG,QAAA,KAAY,MAAf;YACG,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;cACG,mBAAA,CAAoB,CAAC,QAAQ,CAAC,IAA9B,EAAoC,OAApC,EAA6C,CAA7C,EADH;aAAA,MAEK,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;cACF,mBAAA,CAAoB,CAAC,QAAQ,CAAC,GAA9B,EAAmC,OAAnC,EAA4C,CAA5C,EADE;aAHR;WArBH;;MAJgB,EA5anB;;;;;;;;;;;;;;;;;;MA6dA,mBAAA,GAAsB,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,MAAxB,CAAA;AAEnB,YAAA,UAAA,EAAA,SAAA;;QAAA,IAAG,MAAM,CAAC,QAAV;;UAEG,SAAA,GAAe,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B,GAA2C,iBAAA,GAAoB,KAApB,GAA4B,QAAvE,GAAqF,cAAA,GAAiB,KAAjB,GAAyB,YAA1H;;UAEA,EAAE,CAAC,GAAH,CAAO,GAAA,GAAM,MAAM,CAAC,SAAb,GAAyB,sBAAhC,EAAwD,QAAA,GAAW,IAAX,GAAkB,GAA1E;UACA,IAAG,IAAA,KAAQ,OAAX;;YAEG,EAAE,CAAC,GAAH,CAAO,MAAM,CAAC,QAAd,EAAwB,SAAxB,EAAA;;YAEA,EAAE,CAAC,IAAH,CAAQ,kEAAR,EAA4E,QAAA,CAAA,CAAA,EAAA;;cAEzE,EAAE,CAAC,MAAH,CAAU,kEAAV;cACA,0BAAA,CAAA;YAHyE,CAA5E,EAJH;WAAA,MASK,IAAG,IAAA,KAAQ,OAAX;YACF,EAAE,CAAC,GAAH,CAAO,MAAM,CAAC,QAAd,EAAwB,SAAxB,EADE;WAAA,MAEA,IAAG,IAAA,KAAQ,QAAX;;YAEF,EAAE,CAAC,GAAH,CAAO,GAAA,GAAM,MAAM,CAAC,SAAb,GAAyB,6BAAhC,EAA+D,QAA/D;YACA,EAAE,CAAC,GAAH,CAAO,MAAM,CAAC,QAAd,EAAwB,SAAxB,EADA;;YAGA,EAAE,CAAC,IAAH,CAAQ,kEAAR,EAA4E,QAAA,CAAA,CAAA,EAAA;;cAEzE,EAAE,CAAC,MAAH,CAAU,kEAAV,EAAA;;cAEA,mBAAA,CAAoB,MAAO,CAAA,YAAA,CAA3B,EAA0C,OAA1C,EAAmD,CAAnD,EAFA;;cAIA,UAAA,CAAA;YANyE,CAA5E,EALE;WAhBR;SAAA,MAAA;;UA+BG,UAAA,GAAa,CAAA;UACb,UAAW,CAAA,MAAM,CAAC,QAAP,CAAX,GAA8B;UAC9B,IAAG,IAAA,KAAQ,OAAX;YACG,EAAE,CAAC,OAAH,CAAW,UAAX,EAAuB,QAAvB,EAAiC,MAAM,CAAC,QAAQ,CAAC,MAAjD,EAAyD,QAAA,CAAA,CAAA;cACtD,0BAAA,CAAA;YADsD,CAAzD,EADH;WAAA,MAIK,IAAG,IAAA,KAAQ,OAAX;YACF,EAAE,CAAC,GAAH,CAAO,MAAM,CAAC,QAAd,EAAwB,KAAxB,EADE;WAAA,MAEA,IAAG,IAAA,KAAQ,QAAX;YACF,EAAE,CAAC,OAAH,CAAW,UAAX,EAAuB,KAAvB,EAA8B,QAA9B,EAAwC,QAAA,CAAA,CAAA;cACrC,mBAAA,CAAoB,MAAO,CAAA,YAAA,CAA3B,EAA0C,OAA1C,EAAmD,CAAnD,EAAA;;cAEA,UAAA,CAAA;YAHqC,CAAxC,EADE;WAvCR;;MAFmB,EA7dtB;;;;;MAkhBA,aAAA,GAAgB,QAAA,CAAA,CAAA;AACb,YAAA,CAAA,EAAA,WAAA,EAAA,SAAA,EAAA;QAAA,SAAA,GAAY;QACZ,QAAA,GAAW,WAAA,CAAA,EADX;;QAGA,CAAA,GAAI;AACJ,eAAM,CAAA,GAAI,QAAV;UACG,WAAA,GAAc,GAAd;;UAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAhB,IAA+B,CAAC,CAAC,UAAF,CAAa,MAAM,CAAC,QAAQ,CAAC,UAA7B,CAAlC;YACG,WAAA,GAAc,MAAM,CAAC,QAAQ,CAAC,UAAhB,CAA2B,CAA3B;YACd,MAAM,CAAC,OAAO,CAAC,QAAf,CAAwB,iBAAxB,EAFH;WAAA,MAAA;YAIG,WAAA,GAAc,CAAA,GAAI;YAClB,MAAM,CAAC,OAAO,CAAC,QAAf,CAAwB,kBAAxB,EALH;WAFA;;;UAUA,SAAA,IAAa,0DAAA,GAA6D,CAA7D,GAAiE,0BAAjE,GAA8F,WAA9F,GAA4G;UACzH,CAAA;QAZH,CAJA;;QAkBA,MAAM,CAAC,OAAO,CAAC,IAAf,CAAoB,SAApB;MAnBa,EAlhBhB;;;;;MA4iBA,WAAA,GAAc,QAAA,CAAA,CAAA;QACX,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,WAApB;;UAEG,MAAM,CAAC,OAAP,GAAiB,CAAA,CAAE,0BAAF,EAAjB;;UAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,aAAnB;YACG,CAAA,CAAE,MAAM,CAAC,QAAQ,CAAC,aAAlB,CAAgC,CAAC,IAAjC,CAAsC,MAAM,CAAC,OAA7C,EADH;WAAA,MAAA;;YAIG,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAnB,CAA4B,cAA5B,CAA2C,CAAC,MAA5C,CAAmD,MAAM,CAAC,OAA1D,EAJH;WAFA;;UAQA,aAAA,CAAA,EAVH;SAAA,MAAA;UAYG,MAAM,CAAC,OAAP,GAAiB,CAAA,CAAE,MAAM,CAAC,QAAQ,CAAC,WAAlB,EAZpB;SAAA;;QAcA,MAAM,CAAC,OAAO,CAAC,EAAf,CAAkB,OAAlB,EAA2B,GAA3B,EAAgC,cAAhC;MAfW,EA5iBd;;;;;MAkkBA,cAAA,GAAiB,QAAA,CAAA,CAAA;QACd,MAAM,CAAC,QAAQ,CAAC,IAAhB,GAAuB,CAAA,CAAE,6BAAA,GAAgC,MAAM,CAAC,QAAQ,CAAC,QAAhD,GAA2D,MAA7D;QACvB,MAAM,CAAC,QAAQ,CAAC,IAAhB,GAAuB,CAAA,CAAE,6BAAA,GAAgC,MAAM,CAAC,QAAQ,CAAC,QAAhD,GAA2D,MAA7D,EADvB;;QAGA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAArB,CAA0B,OAA1B,EAAmC,aAAnC;QACA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAArB,CAA0B,OAA1B,EAAmC,aAAnC,EAJA;;QAMA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAnB;UACG,CAAA,CAAE,MAAM,CAAC,QAAQ,CAAC,YAAlB,CAA+B,CAAC,MAAhC,CAAuC,MAAM,CAAC,QAAQ,CAAC,IAAvD,EADH;SANA;;QASA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAnB;UACG,CAAA,CAAE,MAAM,CAAC,QAAQ,CAAC,YAAlB,CAA+B,CAAC,MAAhC,CAAuC,MAAM,CAAC,QAAQ,CAAC,IAAvD,EADH;;QAGA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAtD;;UAEG,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAAA,CAAE,uCAAF,EAA9B;;UAEA,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,MAA5B,CAAmC,MAAM,CAAC,QAAQ,CAAC,IAAnD,CAAwD,CAAC,MAAzD,CAAgE,MAAM,CAAC,QAAQ,CAAC,IAAhF,EAFA;;UAIA,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAnB,CAA4B,2BAA5B,CAAwD,CAAC,MAAzD,CAAgE,MAAM,CAAC,QAAQ,CAAC,WAAhF,EANH;;MAbc,EAlkBjB;;;;;MA4lBA,kBAAA,GAAqB,QAAA,CAAA,CAAA;QAClB,MAAM,CAAC,QAAQ,CAAC,KAAhB,GAAwB,CAAA,CAAE,iEAAA,GAAoE,MAAM,CAAC,QAAQ,CAAC,SAApF,GAAgG,YAAlG;QACxB,MAAM,CAAC,QAAQ,CAAC,IAAhB,GAAuB,CAAA,CAAE,gEAAA,GAAmE,MAAM,CAAC,QAAQ,CAAC,QAAnF,GAA8F,YAAhG,EADvB;;QAGA,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,CAAA,CAAE,kCAAF,EAHzB;;QAKA,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAvB,CAA0B,OAA1B,EAAmC,WAAnC,EAAgD,cAAhD;QACA,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAvB,CAA0B,OAA1B,EAAmC,UAAnC,EAA+C,aAA/C,EANA;;QAQA,IAAG,MAAM,CAAC,QAAQ,CAAC,mBAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAvB,CAA8B,MAAM,CAAC,QAAQ,CAAC,KAA9C,EADH;SAAA,MAAA;;UAIG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAvB,CAA8B,MAAM,CAAC,QAAQ,CAAC,KAA9C,CAAoD,CAAC,MAArD,CAA4D,MAAM,CAAC,QAAQ,CAAC,IAA5E,EAJH;SARA;;QAcA,IAAG,MAAM,CAAC,QAAQ,CAAC,oBAAnB;UACG,CAAA,CAAE,MAAM,CAAC,QAAQ,CAAC,oBAAlB,CAAuC,CAAC,IAAxC,CAA6C,MAAM,CAAC,QAAQ,CAAC,MAA7D,EADH;SAAA,MAAA;;UAIG,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAnB,CAA4B,sBAA5B,CAAmD,CAAC,MAApD,CAA2D,MAAM,CAAC,QAAQ,CAAC,MAA3E,EAJH;SAdA;;QAoBA,kBAAA,CAAsB,MAAM,CAAC,QAAQ,CAAC,SAAnB,GAAkC,MAAlC,GAA8C,OAAjE;MArBkB,EA5lBrB;;;;;MAwnBA,cAAA,GAAiB,QAAA,CAAA,CAAA,EAAA;;QAEd,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,QAAA,CAAC,KAAD,CAAA;AAElB,cAAA,KAAA;;UAAA,KAAA,GAAQ,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,CAAyB,CAAC,IAA1B,CAA+B,OAA/B,EAAR;;UAEA,IAAG,KAAA,KAAS,MAAT,IAAuB,CAAC,EAAA,GAAK,KAAN,CAAY,CAAC,MAAvC;YACG,CAAA,CAAE,IAAF,CAAO,CAAC,MAAR,CAAe,gCAAA,GAAmC,KAAnC,GAA2C,eAA1D,EADH;;QAJkB,CAArB;MAFc,EAxnBjB;;;;;;;;MA0oBA,aAAA,GAAgB,QAAA,CAAC,CAAD,CAAA,EAAA;;QAEb,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAnB;UACG,EAAE,CAAC,QAAH,CAAA,EADH;;QAEA,EAAE,CAAC,aAAH,CAAA;QACA,CAAC,CAAC,cAAF,CAAA;MALa,EA1oBhB;;;;;;;;MAypBA,aAAA,GAAgB,QAAA,CAAC,CAAD,CAAA,EAAA;;QAEb,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAnB;UACG,EAAE,CAAC,QAAH,CAAA,EADH;;QAEA,EAAE,CAAC,aAAH,CAAA;QACA,CAAC,CAAC,cAAF,CAAA;MALa,EAzpBhB;;;;;;;;MAwqBA,cAAA,GAAiB,QAAA,CAAC,CAAD,CAAA;QACd,EAAE,CAAC,SAAH,CAAA;QACA,CAAC,CAAC,cAAF,CAAA;MAFc,EAxqBjB;;;;;;;;MAorBA,aAAA,GAAgB,QAAA,CAAC,CAAD,CAAA;QACb,EAAE,CAAC,QAAH,CAAA;QACA,CAAC,CAAC,cAAF,CAAA;MAFa,EAprBhB;;;;;;;;MAgsBA,cAAA,GAAiB,QAAA,CAAC,CAAD,CAAA;AAEd,YAAA,UAAA,EAAA,SAAA;;QAAA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAnB;UACG,EAAE,CAAC,QAAH,CAAA,EADH;;QAEA,SAAA,GAAY,CAAA,CAAE,CAAC,CAAC,aAAJ;QACZ,IAAG,SAAS,CAAC,IAAV,CAAe,kBAAf,CAAA,KAAsC,MAAzC;UACG,UAAA,GAAa,QAAA,CAAS,SAAS,CAAC,IAAV,CAAe,kBAAf,CAAT,EAAb;;UAEA,IAAG,UAAA,KAAc,MAAM,CAAC,MAAM,CAAC,KAA/B;YACG,EAAE,CAAC,SAAH,CAAa,UAAb,EADH;;UAEA,CAAC,CAAC,cAAF,CAAA,EALH;;MALc,EAhsBjB;;;;;;;;MAotBA,iBAAA,GAAoB,QAAA,CAAC,UAAD,CAAA;AAEjB,YAAA,GAAA;;QAAA,GAAA,GAAM,MAAM,CAAC,QAAQ,CAAC,OAAtB;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,SAAhB,KAA6B,OAAhC;UACG,IAAG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA/B;YACG,GAAA,GAAM,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,MAAM,CAAC,QAAQ,CAAC,SAAnD,EADT;;UAEA,MAAM,CAAC,OAAO,CAAC,IAAf,CAAoB,UAAA,GAAa,CAAb,GAAiB,MAAM,CAAC,QAAQ,CAAC,mBAAjC,GAAuD,GAA3E;AACA,iBAJH;SAFA;;QAQA,MAAM,CAAC,OAAO,CAAC,IAAf,CAAoB,GAApB,CAAwB,CAAC,WAAzB,CAAqC,QAArC,EARA;;QAUA,MAAM,CAAC,OAAO,CAAC,IAAf,CAAoB,QAAA,CAAC,CAAD,EAAI,EAAJ,CAAA;UACjB,CAAA,CAAE,EAAF,CAAK,CAAC,IAAN,CAAW,GAAX,CAAe,CAAC,EAAhB,CAAmB,UAAnB,CAA8B,CAAC,QAA/B,CAAwC,QAAxC;QADiB,CAApB;MAZiB,EAptBpB;;;;;MAyuBA,0BAAA,GAA6B,QAAA,CAAA,CAAA;AAE1B,YAAA,QAAA;;QAAA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAnB;UACG,QAAA,GAAW,GAAX;;UAEA,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,CAA1B;;YAEG,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,CAAnB,CAAqB,CAAC,QAAtB,CAAA,EAFd;;WAAA,MAIK,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,WAAA,CAAA,CAAA,GAAgB,CAAvC,IAA6C,MAAM,CAAC,QAAvD;YACF,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,CAAC,WAAA,CAAA,CAAA,GAAgB,CAAjB,CAAA,GAAsB,SAAA,CAAA,CAAzC,CAAqD,CAAC,QAAtD,CAAA,EADT;;WAAA,MAGA,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,CAAnD;YACF,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,CAA5C,CAA8C,CAAC,QAA/C,CAAA,EADT;;UAEL,IAAG,QAAH;YACG,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;cACG,mBAAA,CAAoB,CAAC,QAAQ,CAAC,IAA9B,EAAoC,OAApC,EAA6C,CAA7C,EADH;aAAA,MAEK,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,UAA3B;cACF,mBAAA,CAAoB,CAAC,QAAQ,CAAC,GAA9B,EAAmC,OAAnC,EAA4C,CAA5C,EADE;aAHR;WAZH;SAAA;;QAkBA,MAAM,CAAC,OAAP,GAAiB,MAlBjB;;QAoBA,MAAM,CAAC,QAAQ,CAAC,YAAhB,CAA6B,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,CAA7B,EAAsE,MAAM,CAAC,QAA7E,EAAuF,MAAM,CAAC,MAAM,CAAC,KAArG;MAtB0B,EAzuB7B;;;;;;;;MAywBA,kBAAA,GAAqB,QAAA,CAAC,KAAD,CAAA,EAAA;;QAElB,IAAG,MAAM,CAAC,QAAQ,CAAC,mBAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAvB,CAA4B,MAAM,CAAC,QAAS,CAAA,KAAA,CAA5C,EADH;SAAA,MAAA;;UAIG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAvB,CAA4B,GAA5B,CAAgC,CAAC,WAAjC,CAA6C,QAA7C;UACA,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAvB,CAA4B,YAAA,GAAe,KAAf,GAAuB,GAAnD,CAAuD,CAAC,QAAxD,CAAiE,QAAjE,EALH;;MAFkB,EAzwBrB;;;;;MAuxBA,uBAAA,GAA0B,QAAA,CAAA,CAAA;QACvB,IAAG,WAAA,CAAA,CAAA,KAAiB,CAApB;UACG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAArB,CAA8B,UAA9B;UACA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAArB,CAA8B,UAA9B,EAFH;SAAA,MAGK,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,MAAM,CAAC,QAAQ,CAAC,gBAArD;;UAEF,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,CAA1B;YACG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAArB,CAA8B,UAA9B;YACA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAArB,CAAiC,UAAjC,EAFH;;WAAA,MAIK,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,WAAA,CAAA,CAAA,GAAgB,CAA1C;YACF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAArB,CAA8B,UAA9B;YACA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAArB,CAAiC,UAAjC,EAFE;WAAA,MAAA;;YAKF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAArB,CAAiC,UAAjC;YACA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAArB,CAAiC,UAAjC,EANE;WANH;;MAJkB,EAvxB1B;;;;;MA8yBA,QAAA,GAAW,QAAA,CAAA,CAAA;AAER,YAAA,OAAA;;QAAA,IAAG,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,CAA/B;UACG,OAAA,GAAU,UAAA,CAAW,EAAE,CAAC,SAAd,EAAyB,MAAM,CAAC,QAAQ,CAAC,SAAzC,EADb;SAAA,MAAA;;UAIG,EAAE,CAAC,SAAH,CAAA,EAJH;SAAA;;QAMA,IAAG,MAAM,CAAC,QAAQ,CAAC,SAAnB;;UAEG,EAAE,CAAC,KAAH,CAAS,CAAC,QAAA,CAAA,CAAA,EAAA;;YAEP,IAAG,MAAM,CAAC,QAAV;;cAEG,EAAE,CAAC,QAAH,CAAY,IAAZ,EAAA;;cAEA,MAAM,CAAC,UAAP,GAAoB,KAJvB;;UAFO,CAAD,CAAT,EAQG,QAAA,CAAA,CAAA,EAAA;;YAEA,IAAG,MAAM,CAAC,UAAV;;cAEG,EAAE,CAAC,SAAH,CAAa,IAAb,EAAA;;cAEA,MAAM,CAAC,UAAP,GAAoB,KAJvB;;UAFA,CARH,EAFH;;MARQ,EA9yBX;;;;;MA80BA,UAAA,GAAa,QAAA,CAAA,CAAA;AACV,YAAA,QAAA,EAAA;QAAA,aAAA,GAAgB,EAAhB;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,aAAhB,KAAiC,MAApC;UACG,EAAE,CAAC,MAAH,CAAU,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAuB,CAAC,QAAxB,CAAiC,UAAjC,CAAV,EADH;SAAA,MAAA;;UAIG,EAAE,CAAC,OAAH,CAAW,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAuB,CAAC,QAAxB,CAAiC,UAAjC,CAAX;UACA,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAuB,CAAC,QAAxB,CAAA;UACX,aAAA,GAAmB,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,CAAC,QAAQ,CAAC,IAAvD,GAAiE,CAAC,QAAQ,CAAC,IAN9F;;QAOA,mBAAA,CAAoB,aAApB,EAAmC,OAAnC,EAA4C,CAA5C,EATA;;QAWA,MAAM,CAAC,QAAQ,CAAC,KAAhB,GAAwB;QACxB,MAAM,CAAC,QAAQ,CAAC,QAAhB,GAA2B;QAC3B,MAAM,CAAC,QAAQ,CAAC,YAAhB,GAA+B,MAb/B;;QAeA,IAAG,MAAM,CAAC,QAAQ,CAAC,WAAhB,IAAgC,CAAC,MAAM,CAAC,QAA3C;;UAEG,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAsB,CAAC,QAAA,CAAA,CAAA;YACpB,EAAE,CAAC,IAAH,CAAA;UADoB,CAAD,CAAtB,EAGG,QAAA,CAAA,CAAA;AAEA,gBAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA;;YAAA,WAAA,GAAc;YACd,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,QAAA,CAAC,KAAD,CAAA;cAClB,WAAA,IAAkB,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,CAAA,CAAE,IAAF,CAAO,CAAC,UAAR,CAAmB,IAAnB,CAA7C,GAA2E,CAAA,CAAE,IAAF,CAAO,CAAC,WAAR,CAAoB,IAApB;YADxE,CAArB,EADA;;YAKA,KAAA,GAAQ,MAAM,CAAC,QAAQ,CAAC,KAAhB,GAAwB,YALhC;;YAOA,QAAA,GAAc,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,MAA7C,GAAyD,MAPpE;;YASA,QAAA,GAAW,KAAA,GAAQ,CAAC,WAAA,GAAc,IAAI,CAAC,GAAL,CAAS,QAAA,CAAS,EAAE,CAAC,GAAH,CAAO,QAAP,CAAT,CAAT,CAAf;YACnB,UAAA,CAAW,QAAX;UAZA,CAHH,EAFH;SAfA;;QAmCA,UAAA,CAAA;MApCU,EA90Bb;;;;;MAy3BA,UAAA,GAAa,QAAA,CAAC,WAAD,CAAA;AACV,YAAA,eAAA,EAAA,MAAA,EAAA,QAAA,EAAA,KAAA,EAAA,UAAA,EAAA;QAAA,KAAA,GAAW,WAAH,GAAoB,WAApB,GAAqC,MAAM,CAAC,QAAQ,CAAC;QAC7D,QAAA,GACG;UAAA,IAAA,EAAM,CAAN;UACA,GAAA,EAAK;QADL;QAEH,KAAA,GACG;UAAA,IAAA,EAAM,CAAN;UACA,GAAA,EAAK;QADL,EALH;;QAQA,IAAG,MAAM,CAAC,QAAQ,CAAC,aAAhB,KAAiC,MAApC;UACG,QAAA,GAAW,EAAE,CAAC,IAAH,CAAQ,WAAR,CAAoB,CAAC,KAArB,CAAA,CAA4B,CAAC,QAA7B,CAAA,EADd;SAAA,MAAA;;UAIG,KAAA,GAAQ,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAuB,CAAC,QAAxB,CAAA,EAJX;;QAKA,eAAA,GAAqB,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,CAAC,QAAQ,CAAC,IAAvD,GAAiE,CAAC,QAAQ,CAAC;QAC7F,UAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,CAAC,KAAK,CAAC,IAApD,GAA8D,CAAC,KAAK,CAAC;QAClF,MAAA,GAAS;UAAA,UAAA,EAAY;QAAZ;QACT,mBAAA,CAAoB,eAApB,EAAqC,QAArC,EAA+C,KAA/C,EAAsD,MAAtD;MAjBU,EAz3Bb;;;;;MAi5BA,SAAA,GAAY,QAAA,CAAA,CAAA,EAAA;;QAET,MAAM,CAAC,KAAP,GACG;UAAA,KAAA,EACG;YAAA,CAAA,EAAG,CAAH;YACA,CAAA,EAAG;UADH,CADH;UAGA,GAAA,EACG;YAAA,CAAA,EAAG,CAAH;YACA,CAAA,EAAG;UADH;QAJH;QAMH,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,YAArB,EAAmC,YAAnC;MATS,EAj5BZ;;;;;;;;MAo6BA,YAAA,GAAe,QAAA,CAAC,CAAD,CAAA;AACZ,YAAA;QAAA,IAAG,MAAM,CAAC,OAAV;UACG,CAAC,CAAC,cAAF,CAAA,EADH;SAAA,MAAA;;UAIG,MAAM,CAAC,KAAK,CAAC,WAAb,GAA2B,EAAE,CAAC,QAAH,CAAA;UAC3B,IAAA,GAAO,CAAC,CAAC,cADT;;UAGA,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAnB,GAAuB,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC;UAC9C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAnB,GAAuB,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,MAJ9C;;UAMA,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,WAArB,EAAkC,WAAlC,EANA;;UAQA,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,UAArB,EAAiC,UAAjC,EAZH;;MADY,EAp6Bf;;;;;;;;MA27BA,WAAA,GAAc,QAAA,CAAC,CAAD,CAAA;QACX;AAAA,YAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAAA;QACA,IAAA,GAAO,CAAC,CAAC,cADT;;QAGA,SAAA,GAAY,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,KAAvB,GAAgC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAA5D;QACZ,SAAA,GAAY,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,KAAvB,GAAgC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAA5D,EAJZ;;QAMA,IAAG,SAAA,GAAY,CAAZ,GAAgB,SAAhB,IAA8B,MAAM,CAAC,QAAQ,CAAC,oBAAjD;UACG,CAAC,CAAC,cAAF,CAAA,EADH;;SAAA,MAGK,IAAG,SAAA,GAAY,CAAZ,GAAgB,SAAhB,IAA8B,MAAM,CAAC,QAAQ,CAAC,oBAAjD;UACF,CAAC,CAAC,cAAF,CAAA,EADE;;QAEL,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAAxB,IAAmC,MAAM,CAAC,QAAQ,CAAC,aAAtD;UACG,KAAA,GAAQ,EAAR;;UAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;YACG,MAAA,GAAS,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,KAAvB,GAAgC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5D,KAAA,GAAQ,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAzB,GAAgC,OAF3C;WAAA,MAAA;;YAKG,MAAA,GAAS,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,KAAvB,GAAgC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5D,KAAA,GAAQ,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAzB,GAA+B,OAN1C;;UAOA,mBAAA,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,CAApC,EAVH;;MAZW,EA37Bd;;;;;;;;MA29BA,UAAA,GAAa,QAAA,CAAC,CAAD,CAAA;QACV;AAAA,YAAA,QAAA,EAAA,IAAA,EAAA;QACA,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,WAAvB,EAAoC,WAApC;QACA,IAAA,GAAO,CAAC,CAAC;QACT,KAAA,GAAQ,EAHR;;QAKA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAjB,GAAqB,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAjB,GAAqB,IAAI,CAAC,cAAe,CAAA,CAAA,CAAE,CAAC,MAN5C;;QAQA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAA3B;UACG,QAAA,GAAW,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAnB,GAAwB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAlD;UACX,IAAG,QAAA,IAAY,MAAM,CAAC,QAAQ,CAAC,cAA/B;YACG,IAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAnB,GAAuB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAA3C;cAAkD,EAAE,CAAC,aAAH,CAAA,EAAlD;aAAA,MAAA;cAA0E,EAAE,CAAC,aAAH,CAAA,EAA1E;;YACA,EAAE,CAAC,QAAH,CAAA,EAFH;WAFH;SAAA,MAAA;;UAOG,QAAA,GAAW,EAAX;;UAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;YACG,QAAA,GAAW,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAjB,GAAsB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YACpD,KAAA,GAAQ,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAFpC;WAAA,MAAA;YAIG,QAAA,GAAW,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAjB,GAAsB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YACpD,KAAA,GAAQ,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IALpC;;UAOA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,CAAvB,IAA6B,QAAA,GAAW,CAAxC,IAA6C,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB,QAAA,GAAW,CAAhF,CAArC;YACG,mBAAA,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,GAApC,EADH;WAAA,MAAA;;YAIG,IAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAA,IAAsB,MAAM,CAAC,QAAQ,CAAC,cAAzC;cACG,IAAG,QAAA,GAAW,CAAd;gBAAqB,EAAE,CAAC,aAAH,CAAA,EAArB;eAAA,MAAA;gBAA6C,EAAE,CAAC,aAAH,CAAA,EAA7C;;cACA,EAAE,CAAC,QAAH,CAAA,EAFH;aAAA,MAAA;;cAKG,mBAAA,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,GAApC,EALH;aAJH;WAhBH;;QA0BA,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,UAAvB,EAAmC,UAAnC;MAnCU,EA39Bb;;;;;MAqgCA,YAAA,GAAe,QAAA,CAAC,CAAD,CAAA;AAEZ,YAAA,eAAA,EAAA;QAAA,IAAG,CAAC,MAAM,CAAC,WAAX;AACG,iBADH;SAAA;;QAGA,cAAA,GAAiB,CAAA,CAAE,MAAF,CAAS,CAAC,KAAV,CAAA;QACjB,eAAA,GAAkB,CAAA,CAAE,MAAF,CAAS,CAAC,MAAV,CAAA,EAJlB;;;;QAQA,IAAG,WAAA,KAAe,cAAf,IAAiC,YAAA,KAAgB,eAApD;;UAEG,WAAA,GAAc;UACd,YAAA,GAAe,gBADf;;UAGA,EAAE,CAAC,YAAH,CAAA,EAHA;;UAKA,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,IAA/B,CAAoC,EAApC,EAAwC,MAAM,CAAC,MAAM,CAAC,KAAtD,EAPH;;MAVY,EArgCf;;;;;;;;;;;;;;;;;MAyiCA,EAAE,CAAC,SAAH,GAAe,QAAA,CAAC,UAAD,EAAa,SAAb,CAAA;QACZ;AAAA,YAAA,EAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,EAAA,KAAA;;QAEA,IAAG,MAAM,CAAC,OAAP,IAAkB,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,UAA5C;AACG,iBADH;SAFA;;QAKA,MAAM,CAAC,OAAP,GAAiB,KALjB;;QAOA,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,MAAM,CAAC,MAPhC;;QASA,IAAG,UAAA,GAAa,CAAhB;UACG,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,WAAA,CAAA,CAAA,GAAgB,EADzC;;SAAA,MAGK,IAAG,UAAA,IAAc,WAAA,CAAA,CAAjB;UACF,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,EADpB;SAAA,MAAA;;UAIF,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,WAJpB;SAZL;;QAkBA,MAAM,CAAC,QAAQ,CAAC,aAAhB,CAA8B,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,CAA9B,EAAuE,MAAM,CAAC,QAA9E,EAAwF,MAAM,CAAC,MAAM,CAAC,KAAtG;QACA,IAAG,SAAA,KAAa,MAAhB;UACG,MAAM,CAAC,QAAQ,CAAC,WAAhB,CAA4B,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,CAA5B,EAAqE,MAAM,CAAC,QAA5E,EAAsF,MAAM,CAAC,MAAM,CAAC,KAApG,EADH;SAAA,MAEK,IAAG,SAAA,KAAa,MAAhB;UACF,MAAM,CAAC,QAAQ,CAAC,WAAhB,CAA4B,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,CAA5B,EAAqE,MAAM,CAAC,QAA5E,EAAsF,MAAM,CAAC,MAAM,CAAC,KAApG,EADE;SArBL;;QAwBA,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB,MAAM,CAAC,MAAM,CAAC,KAAd,IAAuB,WAAA,CAAA,CAAA,GAAgB,EAxB5D;;QA0BA,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAnB;UACG,iBAAA,CAAkB,MAAM,CAAC,MAAM,CAAC,KAAhC,EADH;SA1BA;;QA6BA,IAAG,MAAM,CAAC,QAAQ,CAAC,QAAnB;UACG,uBAAA,CAAA,EADH;SA7BA;;QAgCA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,MAA3B;;UAEG,IAAG,MAAM,CAAC,QAAQ,CAAC,cAAhB,IAAmC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAA,CAAA,KAA4B,iBAAA,CAAA,CAAlE;YACG,MAAM,CAAC,QAAQ,CAAC,OAAhB,CAAwB;cAAE,MAAA,EAAQ,iBAAA,CAAA;YAAV,CAAxB,EAAyD,MAAM,CAAC,QAAQ,CAAC,mBAAzE,EADH;WAAA;;UAGA,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,UAAvB,CAAkC,CAAC,OAAnC,CAA2C,MAAM,CAAC,QAAQ,CAAC,KAA3D,CAAiE,CAAC,GAAlE,CAAsE;YAAA,MAAA,EAAQ;UAAR,CAAtE,EAHA;;UAKA,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC,CAAuC,CAAC,GAAxC,CAA4C,QAA5C,EAAsD,MAAM,CAAC,QAAQ,CAAC,WAAhB,GAA8B,CAApF,CAAsF,CAAC,MAAvF,CAA8F,MAAM,CAAC,QAAQ,CAAC,KAA9G,EAAqH,QAAA,CAAA,CAAA;YAClH,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,MAAM,CAAC,QAAQ,CAAC,WAAtC;YACA,0BAAA,CAAA;UAFkH,CAArH,EAPH;SAAA,MAAA;;;UAcG,IAAG,MAAM,CAAC,QAAQ,CAAC,cAAhB,IAAmC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAA,CAAA,KAA4B,iBAAA,CAAA,CAAlE;YACG,MAAM,CAAC,QAAQ,CAAC,OAAhB,CAAwB;cAAE,MAAA,EAAQ,iBAAA,CAAA;YAAV,CAAxB,EAAyD,MAAM,CAAC,QAAQ,CAAC,mBAAzE,EADH;;UAEA,MAAA,GAAS;UACT,QAAA,GACG;YAAA,IAAA,EAAM,CAAN;YACA,GAAA,EAAK;UADL;UAGH,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,MAAM,CAAC,QAAzC,IAAsD,MAAM,CAAC,MAAM,CAAC,IAAvE;YACG,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B;;cAEG,SAAA,GAAY,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAAyB,CAA5C;cACZ,QAAA,GAAW,SAAS,CAAC,QAAV,CAAA,EADX;;cAGA,MAAA,GAAS,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAA,CAAA,GAA0B,SAAS,CAAC,UAAV,CAAA,EALtC;aAAA,MAAA;;cAQG,gBAAA,GAAmB,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAA0B,MAAM,CAAC,QAAQ,CAAC;cAC7D,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,gBAAnB,CAAoC,CAAC,QAArC,CAAA,EATd;aADH;;WAAA,MAYK,IAAG,MAAM,CAAC,QAAP,IAAoB,MAAM,CAAC,MAAM,CAAC,IAAlC,IAA2C,SAAA,KAAa,MAA3D;;YAEF,EAAA,GAAQ,MAAM,CAAC,QAAQ,CAAC,UAAhB,KAA8B,CAAjC,GAAwC,MAAM,CAAC,QAAQ,CAAC,SAAhB,GAA4B,SAAA,CAAA,CAApE,GAAqF,CAAC,WAAA,CAAA,CAAA,GAAgB,CAAjB,CAAA,GAAsB,SAAA,CAAA,CAAtB,GAAoC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAhB,GAA0B,MAAM,CAAC,QAAQ,CAAC,SAA3C;YAC9H,SAAA,GAAY,EAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,CAAC,EAAzB,CAA4B,EAA5B;YACZ,QAAA,GAAW,SAAS,CAAC,QAAV,CAAA,EAJT;;WAAA,MAMA,IAAG,SAAA,KAAa,MAAb,IAAwB,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,CAAlD;;YAEF,QAAA,GAAW,EAAE,CAAC,IAAH,CAAQ,aAAR,CAAsB,CAAC,EAAvB,CAA0B,MAAM,CAAC,QAAQ,CAAC,SAA1C,CAAoD,CAAC,QAArD,CAAA;YACX,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB,MAHnB;;WAAA,MAKA,IAAG,UAAA,IAAc,CAAjB;YACF,SAAA,GAAY,UAAA,GAAa,SAAA,CAAA;YACzB,QAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,SAAnB,CAA6B,CAAC,QAA9B,CAAA,EAFT;WA9BL;;;;;;UAuCA,IAAG,WAAA,KAAe,OAAO,QAAzB;YACG,KAAA,GAAW,MAAM,CAAC,QAAQ,CAAC,IAAhB,KAAwB,YAA3B,GAA6C,CAAC,CAAC,QAAQ,CAAC,IAAT,GAAgB,MAAjB,CAA9C,GAA4E,CAAC,QAAQ,CAAC,IAA9F;;YAEA,mBAAA,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,MAAM,CAAC,QAAQ,CAAC,KAApD,EAHH;WArDH;;MAjCY,EAziCf;;;;;MAyoCA,EAAE,CAAC,aAAH,GAAmB,QAAA,CAAA,CAAA;AAEhB,YAAA;QAAA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,MAAM,CAAC,MAAM,CAAC,IAAnD;AACG,iBADH;;QAEA,UAAA,GAAa,QAAA,CAAS,MAAM,CAAC,MAAM,CAAC,KAAvB,CAAA,GAAgC;QAC7C,EAAE,CAAC,SAAH,CAAa,UAAb,EAAyB,MAAzB;MALgB,EAzoCnB;;;;;MAqpCA,EAAE,CAAC,aAAH,GAAmB,QAAA,CAAA,CAAA;AAEhB,YAAA;QAAA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAjB,IAAkC,MAAM,CAAC,MAAM,CAAC,KAAd,KAAuB,CAA5D;AACG,iBADH;;QAEA,UAAA,GAAa,QAAA,CAAS,MAAM,CAAC,MAAM,CAAC,KAAvB,CAAA,GAAgC;QAC7C,EAAE,CAAC,SAAH,CAAa,UAAb,EAAyB,MAAzB;MALgB,EArpCnB;;;;;;;;MAoqCA,EAAE,CAAC,SAAH,GAAe,QAAA,CAAC,oBAAD,CAAA,EAAA;;QAEZ,IAAG,MAAM,CAAC,QAAV;AACG,iBADH;SAAA;;QAGA,MAAM,CAAC,QAAP,GAAkB,WAAA,CAAY,CAAC,QAAA,CAAA,CAAA;UAC5B,IAAG,MAAM,CAAC,QAAQ,CAAC,aAAhB,KAAiC,MAApC;YAAgD,EAAE,CAAC,aAAH,CAAA,EAAhD;WAAA,MAAA;YAAwE,EAAE,CAAC,aAAH,CAAA,EAAxE;;QAD4B,CAAD,CAAZ,EAGf,MAAM,CAAC,QAAQ,CAAC,KAHD,EAHlB;;QAQA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAhB,IAAiC,oBAAA,KAAwB,IAA5D;UACG,kBAAA,CAAmB,MAAnB,EADH;;MAVY,EApqCf;;;;;;;;MAyrCA,EAAE,CAAC,QAAH,GAAc,QAAA,CAAC,oBAAD,CAAA;QAEX,IAAG,CAAC,MAAM,CAAC,QAAX;AACG,iBADH;SAAA;;QAGA,aAAA,CAAc,MAAM,CAAC,QAArB;QACA,MAAM,CAAC,QAAP,GAAkB,KAJlB;;QAMA,IAAG,MAAM,CAAC,QAAQ,CAAC,YAAhB,IAAiC,oBAAA,KAAwB,IAA5D;UACG,kBAAA,CAAmB,OAAnB,EADH;;MARW,EAzrCd;;;;;MAysCA,EAAE,CAAC,eAAH,GAAqB,QAAA,CAAA,CAAA;eAClB,MAAM,CAAC,MAAM,CAAC;MADI,EAzsCrB;;;;;MAgtCA,EAAE,CAAC,sBAAH,GAA4B,QAAA,CAAA,CAAA;eACzB,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAmB,MAAM,CAAC,MAAM,CAAC,KAAjC;MADyB,EAhtC5B;;;;;MAutCA,EAAE,CAAC,aAAH,GAAmB,QAAA,CAAA,CAAA;eAChB,MAAM,CAAC,QAAQ,CAAC;MADA,EAvtCnB;;;;;MA8tCA,EAAE,CAAC,YAAH,GAAkB,QAAA,CAAA,CAAA,EAAA;;QAEf,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,EAAE,CAAC,IAAH,CAAQ,WAAR,CAApB,CAAyC,CAAC,KAA1C,CAAgD,aAAA,CAAA,CAAhD,EAAA;;QAEA,MAAM,CAAC,QAAQ,CAAC,GAAhB,CAAoB,QAApB,EAA8B,iBAAA,CAAA,CAA9B;QAEA,IAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAApB;UACG,gBAAA,CAAA,EADH;SAJA;;;QAQA,IAAG,MAAM,CAAC,MAAM,CAAC,IAAjB;UACG,MAAM,CAAC,MAAM,CAAC,KAAd,GAAsB,WAAA,CAAA,CAAA,GAAgB,EADzC;SARA;;QAWA,IAAG,MAAM,CAAC,MAAM,CAAC,KAAd,IAAuB,WAAA,CAAA,CAA1B;UACG,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB,KADxB;SAXA;;QAcA,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAhB,IAA0B,CAAC,MAAM,CAAC,QAAQ,CAAC,WAA9C;UACG,aAAA,CAAA;UACA,iBAAA,CAAkB,MAAM,CAAC,MAAM,CAAC,KAAhC,EAFH;;MAhBe,EA9tClB;;;;;MAuvCA,EAAE,CAAC,aAAH,GAAmB,QAAA,CAAA,CAAA;QAEhB,IAAG,CAAC,MAAM,CAAC,WAAX;AACG,iBADH;;QAEA,MAAM,CAAC,WAAP,GAAqB;QACrB,CAAA,CAAE,WAAF,EAAe,IAAf,CAAoB,CAAC,MAArB,CAAA;QACA,MAAM,CAAC,QAAQ,CAAC,IAAhB,CAAqB,QAAA,CAAA,CAAA;UAClB,IAAG,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,CAAA,KAA6B,MAAhC;YAA+C,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,CAAtB,EAA/C;WAAA,MAAA;YAAqG,CAAA,CAAE,IAAF,CAAO,CAAC,UAAR,CAAmB,OAAnB,EAArG;;QADkB,CAArB;QAGA,IAAG,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,CAAA,KAA6B,MAAhC;UAA+C,IAAC,CAAA,IAAD,CAAM,OAAN,EAAe,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,WAAb,CAAf,EAA/C;SAAA,MAAA;UAA8F,CAAA,CAAE,IAAF,CAAO,CAAC,UAAR,CAAmB,OAAnB,EAA9F;;QACA,CAAA,CAAE,IAAF,CAAO,CAAC,MAAR,CAAA,CAAgB,CAAC,MAAjB,CAAA;QACA,IAAG,MAAM,CAAC,QAAQ,CAAC,EAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAnB,CAAA,EADH;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAArB,CAAA,EADH;;QAEA,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAArB,CAAA,EADH;;QAEA,IAAG,MAAM,CAAC,OAAP,IAAmB,MAAM,CAAC,QAAQ,CAAC,QAAtC;UACG,MAAM,CAAC,OAAO,CAAC,MAAf,CAAA,EADH;;QAEA,CAAA,CAAE,aAAF,EAAiB,IAAjB,CAAsB,CAAC,MAAvB,CAAA;QACA,IAAG,MAAM,CAAC,QAAQ,CAAC,MAAnB;UACG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAvB,CAAA,EADH;;QAEA,aAAA,CAAc,MAAM,CAAC,QAArB;QACA,IAAG,MAAM,CAAC,QAAQ,CAAC,UAAnB;UACG,CAAA,CAAE,MAAF,CAAS,CAAC,MAAV,CAAiB,QAAjB,EAA2B,YAA3B,EADH;;MAvBgB,EAvvCnB;;;;;MAsxCA,EAAE,CAAC,YAAH,GAAkB,QAAA,CAAC,QAAD,CAAA;QACf,IAAG,QAAA,KAAY,MAAf;UACG,OAAA,GAAU,SADb;;QAEA,EAAE,CAAC,aAAH,CAAA;QACA,IAAA,CAAA;MAJe;MAOlB,IAAA,CAAA;aAEA;IAhyCa;EA5EI,CAAvB;AAVA",
  "sourcesContent": [
    "# # #\n# BxSlider v4.1.2 - Fully loaded, responsive content slider\n# http://bxslider.com\n#\n# Copyright 2014, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com\n# Written while drinking Belgian ales and listening to jazz\n#\n# Released under the MIT license - http://opensource.org/licenses/MIT\n# # #\n\njQuery(document).ready ($) ->\n   plugin = {}\n   defaults =\n\n# GENERAL\n      mode:                      'vertical'\n      slideSelector:             ''\n      infiniteLoop:              false\n      hideControlOnEnd:          false\n      speed:                     700\n      easing:                    null\n      slideMargin:               0\n      startSlide:                0\n      randomStart:               false\n      captions:                  false\n      ticker:                    false\n      tickerHover:               false\n      adaptiveHeight:            false\n      adaptiveHeightSpeed:       500\n      video:                     false\n      useCSS:                    true\n      preloadImages:             'hidden'\n      responsive:                true\n      slideZIndex:               50\n      wrapperClass:              'bx-wrapper'\n\n# TOUCH\n      touchEnabled:              false\n      swipeThreshold:            50\n      oneToOneTouch:             true\n      preventDefaultSwipeX:      true\n      preventDefaultSwipeY:      false\n\n# PAGER\n      pager:                     true\n      pagerType:                 'full'\n      pagerShortSeparator:       ' / '\n      pagerSelector:             null\n      buildPager:                null\n      pagerCustom:               null\n\n# CONTROLS\n      controls:                  false\n      nextText:                  'Next'\n      prevText:                  'Prev'\n      nextSelector:              null\n      prevSelector:              null\n      autoControls:              false\n      startText:                 'Start'\n      stopText:                  'Stop'\n      autoControlsCombine:       false\n      autoControlsSelector:      null\n\n# AUTO\n      auto:                      false\n      pause:                     8000\n      autoStart:                 true\n      autoDirection:             'next'\n      autoHover:                 true\n      autoDelay:                 0\n      autoSlideForOnePage:       false\n\n# CAROUSEL\n      minSlides:                 1\n      maxSlides:                 1\n      moveSlides:                0\n      slideWidth:                0\n      \n      \n      onSliderLoad:              ->\n      onSlideBefore:             ->\n      onSlideAfter:              ->\n      onSlideNext:               ->\n      onSlidePrev:               ->\n      onSliderResize:            ->\n   \n   $.fn.bxSlider = (options) ->\n      if @length == 0\n         return this\n      # support mutltiple elements\n      if @length > 1\n         @each ->\n            $(this).bxSlider options\n            return\n         return this\n      # create a namespace to be used throughout the plugin\n      slider = {}\n      # set a reference to our slider element\n      el = this\n      plugin.el = this\n      \n      # # #\n      # Makes slideshow responsive\n      # # #\n      \n      # first get the original window dimens (thanks alot IE)\n      windowWidth = $(window).width()\n      windowHeight = $(window).height()\n      \n      # # #\n      # ===================================================================================\n      # = PRIVATE FUNCTIONS\n      # ===================================================================================\n      # # #\n      \n      # # #\n      # Initializes namespace settings to be used throughout plugin\n      # # #\n      \n      init = ->\n# merge user-supplied options with the defaults\n         slider.settings = $.extend({}, defaults, options)\n         # parse slideWidth setting\n         slider.settings.slideWidth = parseInt(slider.settings.slideWidth)\n         # store the original children\n         slider.children = el.children(slider.settings.slideSelector)\n         # check if actual number of slides is less than minSlides / maxSlides\n         if slider.children.length < slider.settings.minSlides\n            slider.settings.minSlides = slider.children.length\n         if slider.children.length < slider.settings.maxSlides\n            slider.settings.maxSlides = slider.children.length\n         # if random start, set the startSlide setting to random number\n         if slider.settings.randomStart\n            slider.settings.startSlide = Math.floor(Math.random() * slider.children.length)\n         # store active slide information\n         slider.active = index: slider.settings.startSlide\n         # store if the slider is in carousel mode (displaying / moving multiple slides)\n         slider.carousel = slider.settings.minSlides > 1 or slider.settings.maxSlides > 1\n         # if carousel, force preloadImages = 'all'\n         if slider.carousel\n            slider.settings.preloadImages = 'all'\n         # calculate the min / max width thresholds based on min / max number of slides\n         # used to setup and update carousel slides dimensions\n         slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin\n         slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin\n         # store the current state of the slider (if currently animating, working is true)\n         slider.working = false\n         # initialize the controls object\n         slider.controls = {}\n         # initialize an auto interval\n         slider.interval = null\n         # determine which property to use for transitions\n         slider.animProp = if slider.settings.mode == 'vertical' then 'top' else 'left'\n         # determine if hardware acceleration can be used\n         slider.usingCSS = slider.settings.useCSS and slider.settings.mode != 'fade' and do ->\n# create our test div element\n            div = document.createElement('div')\n            # css transition properties\n            props = [\n               'WebkitPerspective'\n               'MozPerspective'\n               'OPerspective'\n               'msPerspective'\n            ]\n            # test for each property\n            for i of props\n               if div.style[props[i]] != undefined\n                  slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase()\n                  slider.animProp = '-' + slider.cssPrefix + '-transform'\n                  return true\n            false\n         # if vertical mode always make maxSlides and minSlides equal\n         if slider.settings.mode == 'vertical'\n            slider.settings.maxSlides = slider.settings.minSlides\n         # save original style data\n         el.data 'origStyle', el.attr('style')\n         el.children(slider.settings.slideSelector).each ->\n            $(this).data 'origStyle', $(this).attr('style')\n            return\n         # perform all DOM / CSS modifications\n         setup()\n         return\n      \n      # # #\n      # Performs all DOM and CSS modifications\n      # # #\n      \n      setup = ->\n         \n         # wrap el in a wrapper\n         el.wrap '<div class=\"' + slider.settings.wrapperClass + '\"><div class=\"bx-viewport\"></div></div>'\n         \n         # store a namspace reference to .bx-viewport\n         slider.viewport = el.parent()\n         \n         # add a loading div to display while images are loading\n         slider.loader = $('<div class=\"bx-loading\" />')\n         slider.viewport.prepend slider.loader\n         # set el to a massive width, to hold any needed slides\n         \n         # also strip any margin and padding from el\n         el.css\n            width: if slider.settings.mode == 'horizontal' then slider.children.length * 100 + 215 + '%' else 'auto'\n            position: 'relative'\n         \n         # if using CSS, add the easing property\n         if slider.usingCSS and slider.settings.easing\n            el.css '-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing\n         \n         # if not using CSS and no easing value was supplied, use the default JS animation easing (swing)\n         else if !slider.settings.easing\n            slider.settings.easing = 'swing'\n         \n         slidesShowing = getNumberSlidesShowing()\n         \n         # make modifications to the viewport (.bx-viewport)\n         slider.viewport.css\n            width: '100%'\n            overflow: 'hidden'\n            position: 'relative'\n         \n         slider.viewport.parent().css maxWidth: getViewportMaxWidth()\n         \n         # make modification to the wrapper (.bx-wrapper)\n         if !slider.settings.pager\n            slider.viewport.parent().css margin: '0 auto 0px'\n         \n         # apply css to all slider children\n         slider.children.css\n            'float': if slider.settings.mode == 'horizontal' then 'left' else 'none'\n            listStyle: 'none'\n            position: 'relative'\n         \n         # apply the calculated width after the float is applied to prevent scrollbar interference\n         slider.children.css 'width', getSlideWidth()\n         \n         # if slideMargin is supplied, add the css\n         if slider.settings.mode == 'horizontal' and slider.settings.slideMargin > 0\n            slider.children.css 'marginRight', slider.settings.slideMargin\n         if slider.settings.mode == 'vertical' and slider.settings.slideMargin > 0\n            slider.children.css 'marginBottom', slider.settings.slideMargin\n         \n         # if \"fade\" mode, add positioning and z-index CSS\n         if slider.settings.mode == 'fade'\n            slider.children.css\n               position: 'absolute'\n               zIndex: 0\n               display: 'none'\n            # prepare the z-index on the showing element\n            slider.children.eq(slider.settings.startSlide).css\n               zIndex: slider.settings.slideZIndex\n               display: 'block'\n         \n         # create an element to contain all slider controls (pager, start / stop, etc)\n         slider.controls.el = $('<div class=\"bx-controls\" />')\n         \n         # if captions are requested, add them\n         if slider.settings.captions\n            appendCaptions()\n         \n         # check if startSlide is last slide\n         slider.active.last = slider.settings.startSlide == getPagerQty() - 1\n         \n         # if video is true, set up the fitVids plugin\n         if slider.settings.video\n            el.fitVids()\n         \n         # set the default preload selector (visible)\n         preloadSelector = slider.children.eq(slider.settings.startSlide)\n         if slider.settings.preloadImages == 'all'\n            preloadSelector = slider.children\n         \n         # only check for control addition if not in \"ticker\" mode\n         if !slider.settings.ticker\n            # if pager is requested, add it\n            if slider.settings.pager\n               appendPager()\n            # if controls are requested, add them\n            if slider.settings.controls\n               appendControls()\n            # if auto is true, and auto controls are requested, add them\n            if slider.settings.auto and slider.settings.autoControls\n               appendControlsAuto()\n            # if any control option is requested, add the controls wrapper\n            if slider.settings.controls or slider.settings.autoControls or slider.settings.pager\n               slider.viewport.after slider.controls.el\n         \n            # if ticker mode, do not allow a pager\n         else\n            slider.settings.pager = false\n         \n         # preload all images, then perform final DOM / CSS modifications that depend on images being loaded\n         loadElements preloadSelector, start\n         return\n      \n      loadElements = (selector, callback) ->\n         total = selector.find('img, iframe').length\n         if total == 0\n            callback()\n            return\n         count = 0\n         selector.find('img, iframe').each ->\n            $(this).one('load', ->\n               if ++count == total\n                  callback()\n               return\n            ).each ->\n               if @complete\n                  $(this).load()\n               return\n            return\n         return\n      \n      # # #\n      # Start the slider\n      # # #\n      \n      start = ->\n         \n         # if infinite loop, prepare additional slides\n         if slider.settings.infiniteLoop and slider.settings.mode != 'fade' and !slider.settings.ticker\n            slice = if slider.settings.mode == 'vertical' then slider.settings.minSlides else slider.settings.maxSlides\n            sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone')\n            slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone')\n            el.append(sliceAppend).prepend slicePrepend\n         \n         # remove the loading DOM element\n         slider.loader.remove()\n         \n         # set the left / top position of \"el\"\n         setSlidePosition()\n         \n         # if \"vertical\" mode, always use adaptiveHeight to prevent odd behavior\n         #         if slider.settings.mode == 'vertical'\n         #            slider.settings.adaptiveHeight = true\n         \n         # set the viewport height\n         slider.viewport.height getViewportHeight()\n         \n         # make sure everything is positioned just right (same as a window resize)\n         \n         el.redrawSlider()\n         \n         # onSliderLoad callback\n         slider.settings.onSliderLoad slider.active.index\n         \n         # slider has been fully initialized\n         slider.initialized = true\n         \n         # bind the resize call to the window\n         if slider.settings.responsive\n            $(window).bind 'resize', resizeWindow\n         \n         # if auto is true and has more than 1 page, start the show\n         if slider.settings.auto and slider.settings.autoStart and (getPagerQty() > 1 or slider.settings.autoSlideForOnePage)\n            initAuto()\n         \n         # if ticker is true, start the ticker\n         if slider.settings.ticker\n            initTicker()\n         \n         # if pager is requested, make the appropriate pager link active\n         if slider.settings.pager\n            updatePagerActive slider.settings.startSlide\n         # check for any updates to the controls (like hideControlOnEnd updates)\n         if slider.settings.controls\n            updateDirectionControls()\n         # if touchEnabled is true, setup the touch events\n         if slider.settings.touchEnabled and !slider.settings.ticker\n            initTouch()\n         return\n      \n      # # #\n      # Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value\n      # # #\n      \n      getViewportHeight = ->\n         height = 0\n         # first determine which children (slides) should be used in our height calculation\n         children = $()\n         # if mode is not \"vertical\" and adaptiveHeight is false, include all children\n         if slider.settings.mode != 'vertical' and !slider.settings.adaptiveHeight\n            children = slider.children\n         else\n# if not carousel, return the single active child\n            if !slider.carousel\n               children = slider.children.eq(slider.active.index)\n# if carousel, return a slice of children\n            else\n# get the individual slide index\n               currentIndex = if slider.settings.moveSlides == 1 then slider.active.index else slider.active.index * getMoveBy()\n               # add the current slide to the children\n               children = slider.children.eq(currentIndex)\n               # cycle through the remaining \"showing\" slides\n               i = 1\n               while i <= slider.settings.maxSlides - 1\n# if looped back to the start\n                  if currentIndex + i >= slider.children.length\n                     children = children.add(slider.children.eq(i - 1))\n                  else\n                     children = children.add(slider.children.eq(currentIndex + i))\n                  i++\n         # if \"vertical\" mode, calculate the sum of the heights of the children\n         if slider.settings.mode == 'vertical'\n            children.each (index) ->\n               height += $(this).outerHeight()\n               return\n            # add user-supplied margins\n            if slider.settings.slideMargin > 0\n               height += slider.settings.slideMargin * (slider.settings.minSlides - 1)\n# if not \"vertical\" mode, calculate the max height of the children\n         else\n            height = Math.max.apply(Math, children.map(->\n               $(this).outerHeight false\n            ).get())\n         if slider.viewport.css('box-sizing') == 'border-box'\n            height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) + parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'))\n         else if slider.viewport.css('box-sizing') == 'padding-box'\n            height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'))\n         height\n      \n      # # #\n      # Returns the calculated width to be used for the outer wrapper / viewport\n      # # #\n      \n      getViewportMaxWidth = ->\n         width = '100%'\n         if slider.settings.slideWidth > 0\n            if slider.settings.mode == 'horizontal'\n               width = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin\n            else\n               width = slider.settings.slideWidth\n         width\n      \n      # # #\n      # Returns the calculated width to be applied to each slide\n      # # #\n      \n      getSlideWidth = ->\n# start with any user-supplied slide width\n         newElWidth = slider.settings.slideWidth\n         # get the current viewport width\n         wrapWidth = slider.viewport.width()\n         # if slide width was not supplied, or is larger than the viewport use the viewport width\n         if slider.settings.slideWidth == 0 or slider.settings.slideWidth > wrapWidth and !slider.carousel or slider.settings.mode == 'vertical'\n            newElWidth = wrapWidth\n# if carousel, use the thresholds to determine the width\n         else if slider.settings.maxSlides > 1 and slider.settings.mode == 'horizontal'\n            if wrapWidth > slider.maxThreshold\n# newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides;\n            else if wrapWidth < slider.minThreshold\n               newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides\n         newElWidth\n      \n      # # #\n      # Returns the number of slides currently visible in the viewport (includes partially visible slides)\n      # # #\n      \n      getNumberSlidesShowing = ->\n         slidesShowing = 1\n         if slider.settings.mode == 'horizontal' and slider.settings.slideWidth > 0\n# if viewport is smaller than minThreshold, return minSlides\n            if slider.viewport.width() < slider.minThreshold\n               slidesShowing = slider.settings.minSlides\n# if viewport is larger than minThreshold, return maxSlides\n            else if slider.viewport.width() > slider.maxThreshold\n               slidesShowing = slider.settings.maxSlides\n# if viewport is between min / max thresholds, divide viewport width by first child width\n            else\n               childWidth = slider.children.first().width() + slider.settings.slideMargin\n               slidesShowing = Math.floor((slider.viewport.width() + slider.settings.slideMargin) / childWidth)\n# if \"vertical\" mode, slides showing will always be minSlides\n         else if slider.settings.mode == 'vertical'\n            slidesShowing = slider.settings.minSlides\n         slidesShowing\n      \n      # # #\n      # Returns the number of pages (one full viewport of slides is one \"page\")\n      # # #\n      \n      getPagerQty = ->\n         pagerQty = 0\n         # if moveSlides is specified by the user\n         if slider.settings.moveSlides > 0\n            if slider.settings.infiniteLoop\n               pagerQty = Math.ceil(slider.children.length / getMoveBy())\n            else\n# use a while loop to determine pages\n               breakPoint = 0\n               counter = 0\n               # when breakpoint goes above children length, counter is the number of pages\n               while breakPoint < slider.children.length\n                  ++pagerQty\n                  breakPoint = counter + getNumberSlidesShowing()\n                  counter += if slider.settings.moveSlides <= getNumberSlidesShowing() then slider.settings.moveSlides else getNumberSlidesShowing()\n# if moveSlides is 0 (auto) divide children length by sides showing, then round up\n         else\n            pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing())\n         pagerQty\n      \n      # # #\n      # Returns the number of indivual slides by which to shift the slider\n      # # #\n      \n      getMoveBy = ->\n# if moveSlides was set by the user and moveSlides is less than number of slides showing\n         if slider.settings.moveSlides > 0 and slider.settings.moveSlides <= getNumberSlidesShowing()\n            return slider.settings.moveSlides\n         # if moveSlides is 0 (auto)\n         getNumberSlidesShowing()\n      \n      # # #\n      # Sets the slider's (el) left or top position\n      # # #\n      \n      setSlidePosition = ->\n         `var position`\n         `var position`\n         # if last slide, not infinite loop, and number of children is larger than specified maxSlides\n         if slider.children.length > slider.settings.maxSlides and slider.active.last and !slider.settings.infiniteLoop\n            if slider.settings.mode == 'horizontal'\n# get the last child's position\n               lastChild = slider.children.last()\n               position = lastChild.position()\n               # set the left position\n               setPositionProperty -(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0\n            else if slider.settings.mode == 'vertical'\n# get the last showing index's position\n               lastShowingIndex = slider.children.length - (slider.settings.minSlides)\n               position = slider.children.eq(lastShowingIndex).position()\n               # set the top position\n               setPositionProperty -position.top, 'reset', 0\n# if not last slide\n         else\n# get the position of the first showing slide\n            position = slider.children.eq(slider.active.index * getMoveBy()).position()\n            # check for last slide\n            if slider.active.index == getPagerQty() - 1\n               slider.active.last = true\n            # set the repective position\n            if position != undefined\n               if slider.settings.mode == 'horizontal'\n                  setPositionProperty -position.left, 'reset', 0\n               else if slider.settings.mode == 'vertical'\n                  setPositionProperty -position.top, 'reset', 0\n         return\n      \n      # # #\n      # Sets the el's animating property position (which in turn will sometimes animate el).\n      # If using CSS, sets the transform property. If not using CSS, sets the top / left property.\n      #\n      # @param value (int)\n      #  - the animating property's value\n      #\n      # @param type (string) 'slider', 'reset', 'ticker'\n      #  - the type of instance for which the function is being\n      #\n      # @param duration (int)\n      #  - the amount of time (in ms) the transition should occupy\n      #\n      # @param params (array) optional\n      #  - an optional parameter containing any variables that need to be passed in\n      # # #\n      \n      setPositionProperty = (value, type, duration, params) ->\n# use CSS transform\n         if slider.usingCSS\n# determine the translate3d value\n            propValue = if slider.settings.mode == 'vertical' then 'translate3d(0, ' + value + 'px, 0)' else 'translate3d(' + value + 'px, 0, 0)'\n            # add the CSS transition-duration\n            el.css '-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's'\n            if type == 'slide'\n# set the property value\n               el.css slider.animProp, propValue\n               # bind a callback method - executes when CSS transition completes\n               el.bind 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', ->\n# unbind the callback\n                  el.unbind 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'\n                  updateAfterSlideTransition()\n                  return\n            else if type == 'reset'\n               el.css slider.animProp, propValue\n            else if type == 'ticker'\n# make the transition use 'linear'\n               el.css '-' + slider.cssPrefix + '-transition-timing-function', 'linear'\n               el.css slider.animProp, propValue\n               # bind a callback method - executes when CSS transition completes\n               el.bind 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', ->\n# unbind the callback\n                  el.unbind 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'\n                  # reset the position\n                  setPositionProperty params['resetValue'], 'reset', 0\n                  # start the loop again\n                  tickerLoop()\n                  return\n# use JS animate\n         else\n            animateObj = {}\n            animateObj[slider.animProp] = value\n            if type == 'slide'\n               el.animate animateObj, duration, slider.settings.easing, ->\n                  updateAfterSlideTransition()\n                  return\n            else if type == 'reset'\n               el.css slider.animProp, value\n            else if type == 'ticker'\n               el.animate animateObj, speed, 'linear', ->\n                  setPositionProperty params['resetValue'], 'reset', 0\n                  # run the recursive loop after animation\n                  tickerLoop()\n                  return\n         return\n      \n      # # #\n      # Populates the pager with proper amount of pages\n      # # #\n      \n      populatePager = ->\n         pagerHtml = ''\n         pagerQty = getPagerQty()\n         # loop through each pager item\n         i = 0\n         while i < pagerQty\n            linkContent = ''\n            # if a buildPager function is supplied, use it to get pager link value, else use index + 1\n            if slider.settings.buildPager and $.isFunction(slider.settings.buildPager)\n               linkContent = slider.settings.buildPager(i)\n               slider.pagerEl.addClass 'bx-custom-pager'\n            else\n               linkContent = i + 1\n               slider.pagerEl.addClass 'bx-default-pager'\n            # var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;\n            # add the markup to the string\n            pagerHtml += '<div class=\"bx-pager-item\"><a href=\"\" data-slide-index=\"' + i + '\" class=\"bx-pager-link\">' + linkContent + '</a></div>'\n            i++\n         # populate the pager element with pager links\n         slider.pagerEl.html pagerHtml\n         return\n      \n      # # #\n      # Appends the pager to the controls element\n      # # #\n      \n      appendPager = ->\n         if !slider.settings.pagerCustom\n# create the pager DOM element\n            slider.pagerEl = $('<div class=\"bx-pager\" />')\n            # if a pager selector was supplied, populate it with the pager\n            if slider.settings.pagerSelector\n               $(slider.settings.pagerSelector).html slider.pagerEl\n# if no pager selector was supplied, add it after the wrapper\n            else\n               slider.controls.el.addClass('bx-has-pager').append slider.pagerEl\n            # populate the pager\n            populatePager()\n         else\n            slider.pagerEl = $(slider.settings.pagerCustom)\n         # assign the pager click binding\n         slider.pagerEl.on 'click', 'a', clickPagerBind\n         return\n      \n      # # #\n      # Appends prev / next controls to the controls element\n      # # #\n      \n      appendControls = ->\n         slider.controls.next = $('<a class=\"bx-next\" href=\"\">' + slider.settings.nextText + '</a>')\n         slider.controls.prev = $('<a class=\"bx-prev\" href=\"\">' + slider.settings.prevText + '</a>')\n         # bind click actions to the controls\n         slider.controls.next.bind 'click', clickNextBind\n         slider.controls.prev.bind 'click', clickPrevBind\n         # if nextSlector was supplied, populate it\n         if slider.settings.nextSelector\n            $(slider.settings.nextSelector).append slider.controls.next\n         # if prevSlector was supplied, populate it\n         if slider.settings.prevSelector\n            $(slider.settings.prevSelector).append slider.controls.prev\n         # if no custom selectors were supplied\n         if !slider.settings.nextSelector and !slider.settings.prevSelector\n# add the controls to the DOM\n            slider.controls.directionEl = $('<div class=\"bx-controls-direction\" />')\n            # add the control elements to the directionEl\n            slider.controls.directionEl.append(slider.controls.prev).append slider.controls.next\n            # slider.viewport.append(slider.controls.directionEl);\n            slider.controls.el.addClass('bx-has-controls-direction').append slider.controls.directionEl\n         return\n      \n      # # #\n      # Appends start / stop auto controls to the controls element\n      # # #\n      \n      appendControlsAuto = ->\n         slider.controls.start = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-start\" href=\"\">' + slider.settings.startText + '</a></div>')\n         slider.controls.stop = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-stop\" href=\"\">' + slider.settings.stopText + '</a></div>')\n         # add the controls to the DOM\n         slider.controls.autoEl = $('<div class=\"bx-controls-auto\" />')\n         # bind click actions to the controls\n         slider.controls.autoEl.on 'click', '.bx-start', clickStartBind\n         slider.controls.autoEl.on 'click', '.bx-stop', clickStopBind\n         # if autoControlsCombine, insert only the \"start\" control\n         if slider.settings.autoControlsCombine\n            slider.controls.autoEl.append slider.controls.start\n# if autoControlsCombine is false, insert both controls\n         else\n            slider.controls.autoEl.append(slider.controls.start).append slider.controls.stop\n         # if auto controls selector was supplied, populate it with the controls\n         if slider.settings.autoControlsSelector\n            $(slider.settings.autoControlsSelector).html slider.controls.autoEl\n# if auto controls selector was not supplied, add it after the wrapper\n         else\n            slider.controls.el.addClass('bx-has-controls-auto').append slider.controls.autoEl\n         # update the auto controls\n         updateAutoControls if slider.settings.autoStart then 'stop' else 'start'\n         return\n      \n      # # #\n      # Appends image captions to the DOM\n      # # #\n      \n      appendCaptions = ->\n# cycle through each child\n         slider.children.each (index) ->\n# get the image title attribute\n            title = $(this).find('img:first').attr('title')\n            # append the caption\n            if title != undefined and ('' + title).length\n               $(this).append '<div class=\"bx-caption\"><span>' + title + '</span></div>'\n            return\n         return\n      \n      # # #\n      # Click next binding\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      clickNextBind = (e) ->\n# if auto show is running, stop it\n         if slider.settings.auto\n            el.stopAuto()\n         el.goToNextSlide()\n         e.preventDefault()\n         return\n      \n      # # #\n      # Click prev binding\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      clickPrevBind = (e) ->\n# if auto show is running, stop it\n         if slider.settings.auto\n            el.stopAuto()\n         el.goToPrevSlide()\n         e.preventDefault()\n         return\n      \n      # # #\n      # Click start binding\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      clickStartBind = (e) ->\n         el.startAuto()\n         e.preventDefault()\n         return\n      \n      # # #\n      # Click stop binding\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      clickStopBind = (e) ->\n         el.stopAuto()\n         e.preventDefault()\n         return\n      \n      # # #\n      # Click pager binding\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      clickPagerBind = (e) ->\n# if auto show is running, stop it\n         if slider.settings.auto\n            el.stopAuto()\n         pagerLink = $(e.currentTarget)\n         if pagerLink.attr('data-slide-index') != undefined\n            pagerIndex = parseInt(pagerLink.attr('data-slide-index'))\n            # if clicked pager link is not active, continue with the goToSlide call\n            if pagerIndex != slider.active.index\n               el.goToSlide pagerIndex\n            e.preventDefault()\n         return\n      \n      # # #\n      # Updates the pager links with an active class\n      #\n      # @param slideIndex (int)\n      #  - index of slide to make active\n      # # #\n      \n      updatePagerActive = (slideIndex) ->\n# if \"short\" pager type\n         len = slider.children.length\n         # nb of children\n         if slider.settings.pagerType == 'short'\n            if slider.settings.maxSlides > 1\n               len = Math.ceil(slider.children.length / slider.settings.maxSlides)\n            slider.pagerEl.html slideIndex + 1 + slider.settings.pagerShortSeparator + len\n            return\n         # remove all pager active classes\n         slider.pagerEl.find('a').removeClass 'active'\n         # apply the active class for all pagers\n         slider.pagerEl.each (i, el) ->\n            $(el).find('a').eq(slideIndex).addClass 'active'\n            return\n         return\n      \n      # # #\n      # Performs needed actions after a slide transition\n      # # #\n      \n      updateAfterSlideTransition = ->\n# if infinte loop is true\n         if slider.settings.infiniteLoop\n            position = ''\n            # first slide\n            if slider.active.index == 0\n# set the new position\n               position = slider.children.eq(0).position()\n# carousel, last slide\n            else if slider.active.index == getPagerQty() - 1 and slider.carousel\n               position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position()\n# last slide\n            else if slider.active.index == slider.children.length - 1\n               position = slider.children.eq(slider.children.length - 1).position()\n            if position\n               if slider.settings.mode == 'horizontal'\n                  setPositionProperty -position.left, 'reset', 0\n               else if slider.settings.mode == 'vertical'\n                  setPositionProperty -position.top, 'reset', 0\n         # declare that the transition is complete\n         slider.working = false\n         # onSlideAfter callback\n         slider.settings.onSlideAfter slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index\n         return\n      \n      # # #\n      # Updates the auto controls state (either active, or combined switch)\n      #\n      # @param state (string) \"start\", \"stop\"\n      #  - the new state of the auto show\n      # # #\n      \n      updateAutoControls = (state) ->\n# if autoControlsCombine is true, replace the current control with the new state\n         if slider.settings.autoControlsCombine\n            slider.controls.autoEl.html slider.controls[state]\n# if autoControlsCombine is false, apply the \"active\" class to the appropriate control\n         else\n            slider.controls.autoEl.find('a').removeClass 'active'\n            slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass 'active'\n         return\n      \n      # # #\n      # Updates the direction controls (checks if either should be hidden)\n      # # #\n      \n      updateDirectionControls = ->\n         if getPagerQty() == 1\n            slider.controls.prev.addClass 'disabled'\n            slider.controls.next.addClass 'disabled'\n         else if !slider.settings.infiniteLoop and slider.settings.hideControlOnEnd\n# if first slide\n            if slider.active.index == 0\n               slider.controls.prev.addClass 'disabled'\n               slider.controls.next.removeClass 'disabled'\n# if last slide\n            else if slider.active.index == getPagerQty() - 1\n               slider.controls.next.addClass 'disabled'\n               slider.controls.prev.removeClass 'disabled'\n# if any slide in the middle\n            else\n               slider.controls.prev.removeClass 'disabled'\n               slider.controls.next.removeClass 'disabled'\n         return\n      \n      # # #\n      # Initialzes the auto process\n      # # #\n      \n      initAuto = ->\n# if autoDelay was supplied, launch the auto show using a setTimeout() call\n         if slider.settings.autoDelay > 0\n            timeout = setTimeout(el.startAuto, slider.settings.autoDelay)\n# if autoDelay was not supplied, start the auto show normally\n         else\n            el.startAuto()\n         # if autoHover is requested\n         if slider.settings.autoHover\n# on el hover\n            el.hover (->\n# if the auto show is currently playing (has an active interval)\n               if slider.interval\n# stop the auto show and pass true agument which will prevent control update\n                  el.stopAuto true\n                  # create a new autoPaused value which will be used by the relative \"mouseout\" event\n                  slider.autoPaused = true\n               return\n            ), ->\n# if the autoPaused value was created be the prior \"mouseover\" event\n               if slider.autoPaused\n# start the auto show and pass true agument which will prevent control update\n                  el.startAuto true\n                  # reset the autoPaused value\n                  slider.autoPaused = null\n               return\n         return\n      \n      # # #\n      # Initialzes the ticker process\n      # # #\n      \n      initTicker = ->\n         startPosition = 0\n         # if autoDirection is \"next\", append a clone of the entire slider\n         if slider.settings.autoDirection == 'next'\n            el.append slider.children.clone().addClass('bx-clone')\n# if autoDirection is \"prev\", prepend a clone of the entire slider, and set the left position\n         else\n            el.prepend slider.children.clone().addClass('bx-clone')\n            position = slider.children.first().position()\n            startPosition = if slider.settings.mode == 'horizontal' then -position.left else -position.top\n         setPositionProperty startPosition, 'reset', 0\n         # do not allow controls in ticker mode\n         slider.settings.pager = false\n         slider.settings.controls = false\n         slider.settings.autoControls = false\n         # if autoHover is requested\n         if slider.settings.tickerHover and !slider.usingCSS\n# on el hover\n            slider.viewport.hover (->\n               el.stop()\n               return\n            ), ->\n# calculate the total width of children (used to calculate the speed ratio)\n               totalDimens = 0\n               slider.children.each (index) ->\n                  totalDimens += if slider.settings.mode == 'horizontal' then $(this).outerWidth(true) else $(this).outerHeight(true)\n                  return\n               # calculate the speed ratio (used to determine the new speed to finish the paused animation)\n               ratio = slider.settings.speed / totalDimens\n               # determine which property to use\n               property = if slider.settings.mode == 'horizontal' then 'left' else 'top'\n               # calculate the new speed\n               newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))))\n               tickerLoop newSpeed\n               return\n         # start the ticker loop\n         tickerLoop()\n         return\n      \n      # # #\n      # Runs a continuous loop, news ticker-style\n      # # #\n      \n      tickerLoop = (resumeSpeed) ->\n         speed = if resumeSpeed then resumeSpeed else slider.settings.speed\n         position =\n            left: 0\n            top: 0\n         reset =\n            left: 0\n            top: 0\n         # if \"next\" animate left position to last child, then reset left to 0\n         if slider.settings.autoDirection == 'next'\n            position = el.find('.bx-clone').first().position()\n# if \"prev\" animate left position to 0, then reset left to first non-clone child\n         else\n            reset = slider.children.first().position()\n         animateProperty = if slider.settings.mode == 'horizontal' then -position.left else -position.top\n         resetValue = if slider.settings.mode == 'horizontal' then -reset.left else -reset.top\n         params = resetValue: resetValue\n         setPositionProperty animateProperty, 'ticker', speed, params\n         return\n      \n      # # #\n      # Initializes touch events\n      # # #\n      \n      initTouch = ->\n# initialize object to contain all touch values\n         slider.touch =\n            start:\n               x: 0\n               y: 0\n            end:\n               x: 0\n               y: 0\n         slider.viewport.bind 'touchstart', onTouchStart\n         return\n      \n      # # #\n      # Event handler for \"touchstart\"\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      onTouchStart = (e) ->\n         if slider.working\n            e.preventDefault()\n         else\n# record the original position when touch starts\n            slider.touch.originalPos = el.position()\n            orig = e.originalEvent\n            # record the starting touch x, y coordinates\n            slider.touch.start.x = orig.changedTouches[0].pageX\n            slider.touch.start.y = orig.changedTouches[0].pageY\n            # bind a \"touchmove\" event to the viewport\n            slider.viewport.bind 'touchmove', onTouchMove\n            # bind a \"touchend\" event to the viewport\n            slider.viewport.bind 'touchend', onTouchEnd\n         return\n      \n      # # #\n      # Event handler for \"touchmove\"\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      onTouchMove = (e) ->\n         `var change`\n         orig = e.originalEvent\n         # if scrolling on y axis, do not prevent default\n         xMovement = Math.abs(orig.changedTouches[0].pageX - (slider.touch.start.x))\n         yMovement = Math.abs(orig.changedTouches[0].pageY - (slider.touch.start.y))\n         # x axis swipe\n         if xMovement * 3 > yMovement and slider.settings.preventDefaultSwipeX\n            e.preventDefault()\n# y axis swipe\n         else if yMovement * 3 > xMovement and slider.settings.preventDefaultSwipeY\n            e.preventDefault()\n         if slider.settings.mode != 'fade' and slider.settings.oneToOneTouch\n            value = 0\n            # if horizontal, drag along x axis\n            if slider.settings.mode == 'horizontal'\n               change = orig.changedTouches[0].pageX - (slider.touch.start.x)\n               value = slider.touch.originalPos.left + change\n# if vertical, drag along y axis\n            else\n               change = orig.changedTouches[0].pageY - (slider.touch.start.y)\n               value = slider.touch.originalPos.top + change\n            setPositionProperty value, 'reset', 0\n         return\n      \n      # # #\n      # Event handler for \"touchend\"\n      #\n      # @param e (event)\n      #  - DOM event object\n      # # #\n      \n      onTouchEnd = (e) ->\n         `var distance`\n         slider.viewport.unbind 'touchmove', onTouchMove\n         orig = e.originalEvent\n         value = 0\n         # record end x, y positions\n         slider.touch.end.x = orig.changedTouches[0].pageX\n         slider.touch.end.y = orig.changedTouches[0].pageY\n         # if fade mode, check if absolute x distance clears the threshold\n         if slider.settings.mode == 'fade'\n            distance = Math.abs(slider.touch.start.x - (slider.touch.end.x))\n            if distance >= slider.settings.swipeThreshold\n               if slider.touch.start.x > slider.touch.end.x then el.goToNextSlide() else el.goToPrevSlide()\n               el.stopAuto()\n# not fade mode\n         else\n            distance = 0\n            # calculate distance and el's animate property\n            if slider.settings.mode == 'horizontal'\n               distance = slider.touch.end.x - (slider.touch.start.x)\n               value = slider.touch.originalPos.left\n            else\n               distance = slider.touch.end.y - (slider.touch.start.y)\n               value = slider.touch.originalPos.top\n            # if not infinite loop and first / last slide, do not attempt a slide transition\n            if !slider.settings.infiniteLoop and (slider.active.index == 0 and distance > 0 or slider.active.last and distance < 0)\n               setPositionProperty value, 'reset', 200\n            else\n# check if distance clears threshold\n               if Math.abs(distance) >= slider.settings.swipeThreshold\n                  if distance < 0 then el.goToNextSlide() else el.goToPrevSlide()\n                  el.stopAuto()\n               else\n# el.animate(property, 200);\n                  setPositionProperty value, 'reset', 200\n         slider.viewport.unbind 'touchend', onTouchEnd\n         return\n      \n      # # #\n      # Window resize event callback\n      # # #\n      \n      resizeWindow = (e) ->\n# don't do anything if slider isn't initialized.\n         if !slider.initialized\n            return\n         # get the new window dimens (again, thank you IE)\n         windowWidthNew = $(window).width()\n         windowHeightNew = $(window).height()\n         # make sure that it is a true window resize\n         # *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements\n         # are resized. Can you just die already?*\n         if windowWidth != windowWidthNew or windowHeight != windowHeightNew\n# set the new window dimens\n            windowWidth = windowWidthNew\n            windowHeight = windowHeightNew\n            # update all dynamic elements\n            el.redrawSlider()\n            # Call user resize handler\n            slider.settings.onSliderResize.call el, slider.active.index\n         return\n      \n      # # #\n      # ===================================================================================\n      # = PUBLIC FUNCTIONS\n      # ===================================================================================\n      # # #\n      \n      # # #\n      # Performs slide transition to the specified slide\n      #\n      # @param slideIndex (int)\n      #  - the destination slide's index (zero-based)\n      #\n      # @param direction (string)\n      #  - INTERNAL USE ONLY - the direction of travel (\"prev\" / \"next\")\n      # # #\n      \n      el.goToSlide = (slideIndex, direction) ->\n         `var lastChild`\n         # if plugin is currently in motion, ignore request\n         if slider.working or slider.active.index == slideIndex\n            return\n         # declare that plugin is in motion\n         slider.working = true\n         # store the old index\n         slider.oldIndex = slider.active.index\n         # if slideIndex is less than zero, set active index to last child (this happens during infinite loop)\n         if slideIndex < 0\n            slider.active.index = getPagerQty() - 1\n# if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)\n         else if slideIndex >= getPagerQty()\n            slider.active.index = 0\n# set active index to requested slide\n         else\n            slider.active.index = slideIndex\n         # onSlideBefore, onSlideNext, onSlidePrev callbacks\n         slider.settings.onSlideBefore slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index\n         if direction == 'next'\n            slider.settings.onSlideNext slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index\n         else if direction == 'prev'\n            slider.settings.onSlidePrev slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index\n         # check if last slide\n         slider.active.last = slider.active.index >= getPagerQty() - 1\n         # update the pager with active class\n         if slider.settings.pager\n            updatePagerActive slider.active.index\n         # // check for direction control update\n         if slider.settings.controls\n            updateDirectionControls()\n         # if slider is set to mode: \"fade\"\n         if slider.settings.mode == 'fade'\n# if adaptiveHeight is true and next height is different from current height, animate to the new height\n            if slider.settings.adaptiveHeight and slider.viewport.height() != getViewportHeight()\n               slider.viewport.animate { height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed\n            # fade out the visible child and reset its z-index value\n            slider.children.filter(':visible').fadeOut(slider.settings.speed).css zIndex: 0\n            # fade in the newly requested slide\n            slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn slider.settings.speed, ->\n               $(this).css 'zIndex', slider.settings.slideZIndex\n               updateAfterSlideTransition()\n               return\n# slider mode is not \"fade\"\n         else\n# if adaptiveHeight is true and next height is different from current height, animate to the new height\n            if slider.settings.adaptiveHeight and slider.viewport.height() != getViewportHeight()\n               slider.viewport.animate { height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed\n            moveBy = 0\n            position =\n               left: 0\n               top: 0\n            # if carousel and not infinite loop\n            if !slider.settings.infiniteLoop and slider.carousel and slider.active.last\n               if slider.settings.mode == 'horizontal'\n# get the last child position\n                  lastChild = slider.children.eq(slider.children.length - 1)\n                  position = lastChild.position()\n                  # calculate the position of the last slide\n                  moveBy = slider.viewport.width() - lastChild.outerWidth()\n               else\n# get last showing index position\n                  lastShowingIndex = slider.children.length - (slider.settings.minSlides)\n                  position = slider.children.eq(lastShowingIndex).position()\n# horizontal carousel, going previous while on first slide (infiniteLoop mode)\n            else if slider.carousel and slider.active.last and direction == 'prev'\n# get the last child position\n               eq = if slider.settings.moveSlides == 1 then slider.settings.maxSlides - getMoveBy() else (getPagerQty() - 1) * getMoveBy() - (slider.children.length - (slider.settings.maxSlides))\n               lastChild = el.children('.bx-clone').eq(eq)\n               position = lastChild.position()\n# if infinite loop and \"Next\" is clicked on the last slide\n            else if direction == 'next' and slider.active.index == 0\n# get the last clone position\n               position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position()\n               slider.active.last = false\n# normal non-zero requests\n            else if slideIndex >= 0\n               requestEl = slideIndex * getMoveBy()\n               position = slider.children.eq(requestEl).position()\n            \n            # # # If the position doesn't exist\n            # (e.g. if you destroy the slider on a next click),\n            # it doesn't throw an error.\n            # # #\n            \n            if 'undefined' != typeof position\n               value = if slider.settings.mode == 'horizontal' then -(position.left - moveBy) else -position.top\n               # plugin values to be animated\n               setPositionProperty value, 'slide', slider.settings.speed\n         return\n      \n      # # #\n      # Transitions to the next slide in the show\n      # # #\n      \n      el.goToNextSlide = ->\n# if infiniteLoop is false and last page is showing, disregard call\n         if !slider.settings.infiniteLoop and slider.active.last\n            return\n         pagerIndex = parseInt(slider.active.index) + 1\n         el.goToSlide pagerIndex, 'next'\n         return\n      \n      # # #\n      # Transitions to the prev slide in the show\n      # # #\n      \n      el.goToPrevSlide = ->\n# if infiniteLoop is false and last page is showing, disregard call\n         if !slider.settings.infiniteLoop and slider.active.index == 0\n            return\n         pagerIndex = parseInt(slider.active.index) - 1\n         el.goToSlide pagerIndex, 'prev'\n         return\n      \n      # # #\n      # Starts the auto show\n      #\n      # @param preventControlUpdate (boolean)\n      #  - if true, auto controls state will not be updated\n      # # #\n      \n      el.startAuto = (preventControlUpdate) ->\n# if an interval already exists, disregard call\n         if slider.interval\n            return\n         # create an interval\n         slider.interval = setInterval((->\n            if slider.settings.autoDirection == 'next' then el.goToNextSlide() else el.goToPrevSlide()\n            return\n         ), slider.settings.pause)\n         # if auto controls are displayed and preventControlUpdate is not true\n         if slider.settings.autoControls and preventControlUpdate != true\n            updateAutoControls 'stop'\n         return\n      \n      # # #\n      # Stops the auto show\n      #\n      # @param preventControlUpdate (boolean)\n      #  - if true, auto controls state will not be updated\n      # # #\n      \n      el.stopAuto = (preventControlUpdate) ->\n# if no interval exists, disregard call\n         if !slider.interval\n            return\n         # clear the interval\n         clearInterval slider.interval\n         slider.interval = null\n         # if auto controls are displayed and preventControlUpdate is not true\n         if slider.settings.autoControls and preventControlUpdate != true\n            updateAutoControls 'start'\n         return\n      \n      # # #\n      # Returns current slide index (zero-based)\n      # # #\n      \n      el.getCurrentSlide = ->\n         slider.active.index\n      \n      # # #\n      # Returns current slide element\n      # # #\n      \n      el.getCurrentSlideElement = ->\n         slider.children.eq slider.active.index\n      \n      # # #\n      # Returns number of slides in show\n      # # #\n      \n      el.getSlideCount = ->\n         slider.children.length\n      \n      # # #\n      # Update all dynamic slider elements\n      # # #\n      \n      el.redrawSlider = ->\n# resize all children in ratio to new screen size\n         slider.children.add(el.find('.bx-clone')).width getSlideWidth()\n         # adjust the height\n         slider.viewport.css 'height', getViewportHeight()\n         # update the slide position\n         if !slider.settings.ticker\n            setSlidePosition()\n         # if active.last was true before the screen resize, we want\n         # to keep it last no matter what screen size we end on\n         if slider.active.last\n            slider.active.index = getPagerQty() - 1\n         # if the active index (page) no longer exists due to the resize, simply set the index as last\n         if slider.active.index >= getPagerQty()\n            slider.active.last = true\n         # if a pager is being displayed and a custom pager is not being used, update it\n         if slider.settings.pager and !slider.settings.pagerCustom\n            populatePager()\n            updatePagerActive slider.active.index\n         return\n      \n      # # #\n      # Destroy the current instance of the slider (revert everything back to original state)\n      # # #\n      \n      el.destroySlider = ->\n# don't do anything if slider has already been destroyed\n         if !slider.initialized\n            return\n         slider.initialized = false\n         $('.bx-clone', this).remove()\n         slider.children.each ->\n            if $(this).data('origStyle') != undefined then $(this).attr('style', $(this).data('origStyle')) else $(this).removeAttr('style')\n            return\n         if $(this).data('origStyle') != undefined then @attr('style', $(this).data('origStyle')) else $(this).removeAttr('style')\n         $(this).unwrap().unwrap()\n         if slider.controls.el\n            slider.controls.el.remove()\n         if slider.controls.next\n            slider.controls.next.remove()\n         if slider.controls.prev\n            slider.controls.prev.remove()\n         if slider.pagerEl and slider.settings.controls\n            slider.pagerEl.remove()\n         $('.bx-caption', this).remove()\n         if slider.controls.autoEl\n            slider.controls.autoEl.remove()\n         clearInterval slider.interval\n         if slider.settings.responsive\n            $(window).unbind 'resize', resizeWindow\n         return\n      \n      # # #\n      # Reload the slider (revert all DOM changes, and re-initialize)\n      # # #\n      \n      el.reloadSlider = (settings) ->\n         if settings != undefined\n            options = settings\n         el.destroySlider()\n         init()\n         return\n      \n      init()\n      # returns the current jQuery object\n      this\n   \n   return"
  ]
}